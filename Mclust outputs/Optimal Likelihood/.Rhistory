cddq[nchar(cddq$bio) == 11,]
cddq[nchar(cddq$bio) == 11, ] <- substr(cddq$bio[nchar(cddq$bio) == 11], start = 1, stop = 9)
# Check problem with the background variables
table(nchar(cddq$bio))
cddq[nchar(cddq$bio) == 10,]
cddq$bio[cddq$ip == '73.148.78.154'] <- '281814426'
cddq[nchar(cddq$bio) == 10,]
cddq$bio <- gsub("\\`", "", cddq$bio, perl=TRUE)
cddq[nchar(cddq$bio) == 10,]
# Check problem with the background variables
table(nchar(cddq$bio))
cddq[nchar(cddq$bio) == 8,]
cddq$bio[cddq$ip == '72.177.93.142'] <- '191229911'
# Check problem with the background variables
table(nchar(cddq$bio))
cddq[nchar(cddq$bio) == 10,]
cddq$bio[substr(cddq$bio, start = 5, stop = 5) == '5']
cddq[nchar(cddq$bio) == 11, ] <- substr(cddq$bio[nchar(cddq$bio) == 11], start = 1, stop = 9)
cddq$bio[nchar(cddq$bio) == 10,]
cddq$bio[nchar(cddq$bio) == 10]
substr(cddq$bio[nchar(cddq$bio) == 10], start = 9, stop = 9)
substr(cddq$bio[nchar(cddq$bio) == 10], start = 10, stop = 10)
substr(cddq$bio[nchar(cddq$bio) == 10], start = 9, stop = 9) == substr(cddq$bio[nchar(cddq$bio) == 10], start = 10, stop = 10)
logic <- substr(cddq$bio[nchar(cddq$bio) == 10], start = 9, stop = 9) == substr(cddq$bio[nchar(cddq$bio) == 10], start = 10, stop = 10)
cddq$bio[nchar(cddq$bio) == 10 & substr(cddq$bio[nchar(cddq$bio) == 10], start = 9, stop = 9)]
cddq$bio[nchar(cddq$bio) == 10 ]
substr(cddq$bio[nchar(cddq$bio) == 10], start = 9, stop = 9)
cddq$bio[nchar(cddq$bio) == 10  ]
nrow(cddq$bio[nchar(cddq$bio) == 10  ])
count(cddq$bio[nchar(cddq$bio) == 10  ])
length(cddq$bio[nchar(cddq$bio) == 10  ])
logic
length(logic)
cddq$bio[nchar(cddq$bio) == 10] &  substr(cddq$bio[nchar(cddq$bio) == 10], start = 9, stop = 9)
cddq$bio[nchar(cddq$bio) == 10] &
substr(cddq$bio[nchar(cddq$bio) == 10], start = 9, stop = 9)
cddq$bio[nchar(cddq$bio) == 10]
CDDQ$bio[cddq$bio[nchar(cddq$bio) == 10]]
cddq$bio[cddq$bio[nchar(cddq$bio) == 10]]
# Check problem with the background variables
table(nchar(cddq$bio))
cddq[nchar(cddq$bio) == 10,]
cddq$bio[nchar(cddq$bio) == 10,]
cddq$bio[nchar(cddq$bio) == 10]
cddq$bio[nchar(cddq$bio) == 10]
cddq$bio[nchar(cddq$bio) == 10]
cddq$bio[nchar(cddq$bio) == 10][logic]
cddq$bio[nchar(cddq$bio) == 10][logic] <- substr(cddq$bio[nchar(cddq$bio) == 10][logic], start = 1, stop = 9)
# Check problem with the background variables
table(nchar(cddq$bio))
cddq$bio[nchar(cddq$bio) == 10][logic] <- substr(cddq$bio[nchar(cddq$bio) == 10][logic], start = 1, stop = 9); remove(logic)
remove(logic)
cddq$bio[nchar(cddq$bio) == 10]
cddq[nchar(cddq$bio) == 10, ]
# Check problem with the background variables
table(nchar(cddq$bio))
cddq <- cddq[nchar(cddq$bio) == 9, ]
cddq$age <- substr(cddq$bio, start = 1, stop = 2) %>% head
cddq$age <- substr(cddq$bio, start = 1, stop = 2)
View(cddq)
table(cddq$age)
?between
cddq <- cddq[between(cddq$age, 16, 50), ]
# Create the age variable and remove out of age range (14-50)
cddq$age <- substr(cddq$bio, start = 1, stop = 2)
# Create the age variable and remove out of age range (14-50)
cddq$age <- substr(cddq$bio, start = 1, stop = 2) %>% as.numeric
cddq <- cddq[between(cddq$age, 16, 50), ]
table(cddq$age)
# create the education variable
cddq$education <- substr(cddq$bio, start = 3, stop = 4) %>% as.numeric
table(cddq$education)
cddq <- cddq[between(cddq$education, 10, 30), ]
# create the gender variable and remove out of range (10-30)
cddq$gender <- substr(cddq$bio, start = 5, stop = 5) %>% as.numeric
table(cddq$gender)
cddq <- cddq[between(cddq$gender, 1, 2), ]
# create the difficulty variable and remove out of range (1-2)
cddq$difficulty <- substr(cddq$bio, start = 6, stop = 6) %>% as.numeric
table(cddq$difficulty)
# create the stress variable
cddq$stress <- substr(cddq$bio, start = 7, stop = 7) %>% as.numeric
table(cddq$stress)
# create the first variable
cddq$stress <- substr(cddq$bio, start = 8, stop = 8) %>% as.numeric
# create the stress variable
cddq$stress <- substr(cddq$bio, start = 7, stop = 7) %>% as.numeric
# create the first variable
cddq$first <- substr(cddq$bio, start = 8, stop = 8) %>% as.numeric
table(cddq$first)
cddq <- cddq[cddq$first == 2, ]
# create the RCA variable and remove out of range (2)
cddq$rca <- substr(cddq$bio, start = 9, stop = 9) %>% as.numeric
table(cddq$rca)
names <- ['Rm1', 'Rm2', 'Rm3', 'Ri1', 'Ri2', 'Ri3', 'val1', 'Rd1', 'Rd2', 'Rd3', 'Rd4', 'val2', 'Lp1', 'Lp2', 'Lp3', 'Ls1',
'Ls2', 'Ls3', 'Ls4', 'Lo1', 'Lo2', 'Lo3', 'La1', 'La2', 'Iu1', 'Iu2', 'Iu3', 'Ii1', 'Ii2', 'Ii3', 'Ii4', 'Ii5', 'Ie1',
'Ie2', 'time']
names <- c('Rm1', 'Rm2', 'Rm3', 'Ri1', 'Ri2', 'Ri3', 'val1', 'Rd1', 'Rd2', 'Rd3', 'Rd4', 'val2', 'Lp1', 'Lp2', 'Lp3', 'Ls1',
'Ls2', 'Ls3', 'Ls4', 'Lo1', 'Lo2', 'Lo3', 'La1', 'La2', 'Iu1', 'Iu2', 'Iu3', 'Ii1', 'Ii2', 'Ii3', 'Ii4', 'Ii5', 'Ie1',
'Ie2', 'time')
table(length(cddq$cddq))
nchar(length(cddq$cddq))
table(nchar(cddq$cddq))
cddq$cddq[nchar(cddq$cddq) == 9]
# remove corrupt cases
cddq <- cddq[!nchar(cddq$cddq) %in% c(9), ]
table(nchar(cddq$cddq))
cddq$cddq[nchar(cddq$cddq) == 39]
# remove corrupt cases
cddq <- cddq[!nchar(cddq$cddq) %in% c(9, 39), ]
table(nchar(cddq$cddq))
cddq$cddq[nchar(cddq$cddq) == 40]
# remove corrupt cases
cddq <- cddq[!nchar(cddq$cddq) %in% c(9, 39, 40), ]
table(nchar(cddq$cddq))
list(range(39))
list(range(1, 39))
seq(39)
names[2]
for (i in seq(34)) {
cddq[names[i]] <- substr(cddq$cddq, start = i, stop = i) %>% as.numeric }
View(cddq)
describe(cddq)
describe(cddq) %>% round(2)
cddq[names[35]] <- substr(cddq$cddq, start = 35, stop = 38 ) %>% as.numeric }
cddq[names[35]] <- substr(cddq$cddq, start = 35, stop = 38 ) %>% as.numeric
View(cddq)
cddq[names[35]] <- substr(cddq$cddq, start = 35, stop = 38 ) %>% as.numeric; remove(names)
# remove based on validity
table(cddq$val1)
table(cddq$val2)
# remove based on time
table(cddq$time)
hist(cddq$val1)
hist(cddq$val2)
hist(cddq$val1)
hist(cddq$val2)
hist(cddq$val2)
hist(cddq$val1)
hist(cddq$Ie1)
hist(cddq$Ie2)
####################      RELEVANT LIBRARIES                ####################
library(dplyr); library(tidyr); library(psych); library(qdapRegex)
####################      LOAD THE RELEVANT DF + MAKE IT TIDY              ####################
cddq <- file.choose() %>%
read.csv(sep = '\t', header = FALSE)
# REMOVE EXCESSIVE SPACES OR DASHES
cddq$V1 <- gsub("(?<=[\\s])\\s*|^\\s+|\\s+$", "", cddq$V1, perl=TRUE)
cddq$V1 <- gsub("-", "", cddq$V1, perl=TRUE)
# Remove spaces from country names
cddq$V1 <- tolower(cddq$V1); cddq$V1 <- gsub("united states", "usa", cddq$V1); cddq$V1 <- gsub("usa of america", "usa", cddq$V1); cddq$V1 <- gsub("united kingdom", "uk", cddq$V1); cddq$V1 <- gsub("new zealand", "nz", cddq$V1); cddq$V1 <- gsub("cook islands", "nz", cddq$V1); cddq$V1 <- gsub("south africa", "sa", cddq$V1); cddq$V1 <- gsub("saudi arabia", "saudia", cddq$V1); cddq$V1 <- gsub("vereinigte staaten", "usa", cddq$V1); cddq$V1 <- gsub("puerto rico", "usa", cddq$V1); cddq$V1 <- gsub("antigua & barbuda", "usa", cddq$V1); cddq$V1 <- gsub("hong kong", "china", cddq$V1); cddq$V1 <- gsub("faroe islands", "denmark", cddq$V1); cddq$V1 <- gsub("south korea", "sk", cddq$V1);
# Break strings based on spaces
cddq <- separate(cddq, V1, into = c("date", "hour", "bio", "cddq", "ip", "country", "email"), sep = "\\s")
# select only data of US users
cddq <- cddq[cddq$country == 'usa', ]
# Check problem with the background variables
table(nchar(cddq$bio))
# Remove irrelevant chars
cddq$bio <- gsub("\\.5", "", cddq$bio, perl=TRUE)
cddq$bio <- gsub("\\`", "", cddq$bio, perl=TRUE)
# correct data corruption
cddq$bio[cddq$ip == '184.22.115.66'] <- '181713625'
cddq$bio[cddq$ip == '72.182.92.31'] <- '2013751821'
cddq$bio[cddq$ip == '166.137.118.26'] <- '241629915'
cddq$bio[cddq$ip == '73.148.78.154'] <- '281814426'
cddq$bio[cddq$ip == '72.177.93.142'] <- '191229911'
logic <- substr(cddq$bio[nchar(cddq$bio) == 10], start = 9, stop = 9) == substr(cddq$bio[nchar(cddq$bio) == 10], start = 10, stop = 10)
cddq$bio[nchar(cddq$bio) == 10][logic] <- substr(cddq$bio[nchar(cddq$bio) == 10][logic], start = 1, stop = 9); remove(logic)
cddq <- cddq[nchar(cddq$bio) == 9, ]
cddq$age <- substr(cddq$bio, start = 1, stop = 2)
####################      CREATING THE BACKGROUND VARIABLES              ####################
# Create the age variable and remove out of age range (14-50)
cddq$age <- substr(cddq$bio, start = 1, stop = 2) %>% as.numeric
cddq <- cddq[between(cddq$age, 16, 50), ]
# create the education variable and remove out of range (10-30)
cddq$education <- substr(cddq$bio, start = 3, stop = 4) %>% as.numeric
cddq <- cddq[between(cddq$education, 10, 30), ]
# create the gender variable and remove out of range (1-2)
cddq$gender <- substr(cddq$bio, start = 5, stop = 5) %>% as.numeric
cddq <- cddq[between(cddq$gender, 1, 2), ]
# create the difficulty variable
cddq$difficulty <- substr(cddq$bio, start = 6, stop = 6) %>% as.numeric
# create the stress variable
cddq$stress <- substr(cddq$bio, start = 7, stop = 7) %>% as.numeric
# create the first variable and remove out of range (2)
cddq$first <- substr(cddq$bio, start = 8, stop = 8) %>% as.numeric
cddq <- cddq[cddq$first == 2, ]
# create the RCA variable and remove out of range (2)
cddq$rca <- substr(cddq$bio, start = 9, stop = 9) %>% as.numeric
####################      CREATING THE CDDQ VARIABLES              ####################
# remove corrupt cases
cddq <- cddq[!nchar(cddq$cddq) %in% c(9, 39, 40), ]
# create the variables
names <- c('Rm1', 'Rm2', 'Rm3', 'Ri1', 'Ri2', 'Ri3', 'Rd1', 'Rd2', 'Rd3', 'Rd4', 'Lp1', 'Lp2', 'Lp3', 'Ls1',
'Ls2', 'Ls3', 'Ls4', 'Lo1', 'Lo2', 'Lo3', 'La1', 'La2', 'Iu1', 'Iu2', 'Iu3', 'Ii1', 'Ii2', 'Ii3', 'Ii4', 'Ii5', 'Ie1',
'Ie2','val1', 'val2', 'time')
# remove based on validity
table(cddq$val1)
table(cddq$val2)
####################      RELEVANT LIBRARIES                ####################
library(dplyr); library(tidyr); library(psych); library(qdapRegex)
####################      LOAD THE RELEVANT DF + MAKE IT TIDY              ####################
cddq <- file.choose() %>%
read.csv(sep = '\t', header = FALSE)
# REMOVE EXCESSIVE SPACES OR DASHES
cddq$V1 <- gsub("(?<=[\\s])\\s*|^\\s+|\\s+$", "", cddq$V1, perl=TRUE)
cddq$V1 <- gsub("-", "", cddq$V1, perl=TRUE)
# Remove spaces from country names
cddq$V1 <- tolower(cddq$V1); cddq$V1 <- gsub("united states", "usa", cddq$V1); cddq$V1 <- gsub("usa of america", "usa", cddq$V1); cddq$V1 <- gsub("united kingdom", "uk", cddq$V1); cddq$V1 <- gsub("new zealand", "nz", cddq$V1); cddq$V1 <- gsub("cook islands", "nz", cddq$V1); cddq$V1 <- gsub("south africa", "sa", cddq$V1); cddq$V1 <- gsub("saudi arabia", "saudia", cddq$V1); cddq$V1 <- gsub("vereinigte staaten", "usa", cddq$V1); cddq$V1 <- gsub("puerto rico", "usa", cddq$V1); cddq$V1 <- gsub("antigua & barbuda", "usa", cddq$V1); cddq$V1 <- gsub("hong kong", "china", cddq$V1); cddq$V1 <- gsub("faroe islands", "denmark", cddq$V1); cddq$V1 <- gsub("south korea", "sk", cddq$V1);
# Break strings based on spaces
cddq <- separate(cddq, V1, into = c("date", "hour", "bio", "cddq", "ip", "country", "email"), sep = "\\s")
# select only data of US users
cddq <- cddq[cddq$country == 'usa', ]
# Check problem with the background variables
table(nchar(cddq$bio))
# Remove irrelevant chars
cddq$bio <- gsub("\\.5", "", cddq$bio, perl=TRUE)
cddq$bio <- gsub("\\`", "", cddq$bio, perl=TRUE)
# correct data corruption
cddq$bio[cddq$ip == '184.22.115.66'] <- '181713625'
cddq$bio[cddq$ip == '72.182.92.31'] <- '2013751821'
cddq$bio[cddq$ip == '166.137.118.26'] <- '241629915'
cddq$bio[cddq$ip == '73.148.78.154'] <- '281814426'
cddq$bio[cddq$ip == '72.177.93.142'] <- '191229911'
logic <- substr(cddq$bio[nchar(cddq$bio) == 10], start = 9, stop = 9) == substr(cddq$bio[nchar(cddq$bio) == 10], start = 10, stop = 10)
cddq$bio[nchar(cddq$bio) == 10][logic] <- substr(cddq$bio[nchar(cddq$bio) == 10][logic], start = 1, stop = 9); remove(logic)
cddq <- cddq[nchar(cddq$bio) == 9, ]
cddq$age <- substr(cddq$bio, start = 1, stop = 2)
####################      CREATING THE BACKGROUND VARIABLES              ####################
# Create the age variable and remove out of age range (14-50)
cddq$age <- substr(cddq$bio, start = 1, stop = 2) %>% as.numeric
cddq <- cddq[between(cddq$age, 16, 50), ]
# create the education variable and remove out of range (10-30)
cddq$education <- substr(cddq$bio, start = 3, stop = 4) %>% as.numeric
cddq <- cddq[between(cddq$education, 10, 30), ]
# create the gender variable and remove out of range (1-2)
cddq$gender <- substr(cddq$bio, start = 5, stop = 5) %>% as.numeric
cddq <- cddq[between(cddq$gender, 1, 2), ]
# create the difficulty variable
cddq$difficulty <- substr(cddq$bio, start = 6, stop = 6) %>% as.numeric
# create the stress variable
cddq$stress <- substr(cddq$bio, start = 7, stop = 7) %>% as.numeric
# create the first variable and remove out of range (2)
cddq$first <- substr(cddq$bio, start = 8, stop = 8) %>% as.numeric
cddq <- cddq[cddq$first == 2, ]
# create the RCA variable and remove out of range (2)
cddq$rca <- substr(cddq$bio, start = 9, stop = 9) %>% as.numeric
# remove corrupt cases
cddq <- cddq[!nchar(cddq$cddq) %in% c(9, 39, 40), ]
# create the variables
names <- c('Rm1', 'Rm2', 'Rm3', 'Ri1', 'Ri2', 'Ri3', 'Rd1', 'Rd2', 'Rd3', 'Rd4', 'Lp1', 'Lp2', 'Lp3', 'Ls1',
'Ls2', 'Ls3', 'Ls4', 'Lo1', 'Lo2', 'Lo3', 'La1', 'La2', 'Iu1', 'Iu2', 'Iu3', 'Ii1', 'Ii2', 'Ii3', 'Ii4', 'Ii5', 'Ie1',
'Ie2','val1', 'val2', 'time')
for (i in seq(34)) {
cddq[names[i]] <- substr(cddq$cddq, start = i, stop = i) %>% as.numeric }
cddq[names[35]] <- substr(cddq$cddq, start = 35, stop = 38 ) %>% as.numeric; remove(names)
# remove based on validity
table(cddq$val1)
table(cddq$val2)
# remove based on time
table(cddq$time)
# remove based on validity
table(cddq$val1)
table(cddq$val2)
# remove based on time
table(cddq$time)
cddq$Rm <- mean(cddq$Rm1, cddq$Rm2, cddq$Rm3)
?mean
cddq$Rm <- mean(cddq['Rm1', 'Rm2', 'Rm3'])
cddq['Rm1']
cddq['Rm1', 'Rm2']
cddq[['Rm1', 'Rm2']]
cddq$Rm <- mean(cddq$Rm1, cddq$Rm2, cddq$Rm3)
cddq$Rm <- cddq$Rm1 + cddq$Rm2 + cddq$Rm3
table(cddq$Rm)
cddq$Rm <- cddq$Rm1 + cddq$Rm2 + cddq$Rm3 %>% /3
table(cddq$Rm)
cddq$Rm <- cddq$Rm1 + cddq$Rm2 + cddq$Rm3 %>% / 3
cddq$Rm <- (cddq$Rm1 + cddq$Rm2 + cddq$Rm3) / 3
table(cddq$Rm)
cddq$Rm <- (cddq$Rm1 + cddq$Rm2 + cddq$Rm3) / 3 %>% round(2)
table(cddq$Rm)
cddq$Rm <- (cddq$Rm1 + cddq$Rm2 + cddq$Rm3) / 3 %>% round(2)
table(cddq$Rm)
cddq$Rm <- (cddq$Rm1 + cddq$Rm2 + cddq$Rm3) / 3; cddq$Rm <- round(cddq$Rm, 2)
table(cddq$Rm)
cddq$Ri <- (cddq$Ri1 + cddq$Ri2 + cddq$Ri3) / 3; cddq$Rm <- round(cddq$Ri, 2)
cddq$Rm <- (cddq$Rm1 + cddq$Rm2 + cddq$Rm3) / 3; cddq$Rm <- round(cddq$Rm, 2)
cddq$Ri <- (cddq$Ri1 + cddq$Ri2 + cddq$Ri3) / 3; cddq$Ri <- round(cddq$Ri, 2)
cddq$Ri <- (cddq$Rd1 + cddq$Rd2 + cddq$Rd3 + cddq$Rd4) / 4; cddq$Rd <- round(cddq$Rd, 2)
cddq$Rm <- (cddq$Rm1 + cddq$Rm2 + cddq$Rm3) / 3; cddq$Rm <- round(cddq$Rm, 2)
cddq$Ri <- (cddq$Ri1 + cddq$Ri2 + cddq$Ri3) / 3; cddq$Ri <- round(cddq$Ri, 2)
cddq$Rd <- (cddq$Rd1 + cddq$Rd2 + cddq$Rd3 + cddq$Rd4) / 4; cddq$Rd <- round(cddq$Rd, 2)
cddq$Lp <- (cddq$Lp1 + cddq$Lp2 + cddq$Lp3) / 3; cddq$Lp <- round(cddq$Lp, 2)
cddq$Rm <- (cddq$Rm1 + cddq$Rm2 + cddq$Rm3) / 3; cddq$Rm <- round(cddq$Rm, 2)
cddq$Ri <- (cddq$Ri1 + cddq$Ri2 + cddq$Ri3) / 3; cddq$Ri <- round(cddq$Ri, 2)
cddq$Rd <- (cddq$Rd1 + cddq$Rd2 + cddq$Rd3 + cddq$Rd4) / 4; cddq$Rd <- round(cddq$Rd, 2)
cddq$Lp <- (cddq$Lp1 + cddq$Lp2 + cddq$Lp3) / 3; cddq$Lp <- round(cddq$Lp, 2)
cddq$Ls <- (cddq$Ls1 + cddq$Ls2 + cddq$Ls3 + cddq$Ls4) / 4; cddq$Ls <- round(cddq$Ls, 2)
cddq$Lo <- (cddq$Lo1 + cddq$Lo2 + cddq$Lo3) / 3; cddq$Lo <- round(cddq$Lo, 2)
cddq$La <- (cddq$La1 + cddq$La2) / 2; cddq$La <- round(cddq$La, 2)
cddq$Iu <- (cddq$Iu1 + cddq$Iu2 + cddq$Iu3) / 3; cddq$Iu <- round(cddq$Iu, 2)
cddq$Ii <- (cddq$Ii1 + cddq$Ii2 + cddq$Ii3 + cddq$Ii4 + cddq$Ii5) / 5; cddq$Ii <- round(cddq$Ii, 2)
cddq$Ie <- (cddq$Ie1 + cddq$Ie2) / 2; cddq$Ie <- round(cddq$Ie, 2)
cddq$Rm <- (cddq$Rm1 + cddq$Rm2 + cddq$Rm3) / 3; cddq$Rm <- round(cddq$Rm, 2)
cddq$Ri <- (cddq$Ri1 + cddq$Ri2 + cddq$Ri3) / 3; cddq$Ri <- round(cddq$Ri, 2)
cddq$Rd <- (cddq$Rd1 + cddq$Rd2 + cddq$Rd3 + cddq$Rd4) / 4; cddq$Rd <- round(cddq$Rd, 2)
cddq$Lp <- (cddq$Lp1 + cddq$Lp2 + cddq$Lp3) / 3; cddq$Lp <- round(cddq$Lp, 2)
cddq$Ls <- (cddq$Ls1 + cddq$Ls2 + cddq$Ls3 + cddq$Ls4) / 4; cddq$Ls <- round(cddq$Ls, 2)
cddq$Lo <- (cddq$Lo1 + cddq$Lo2 + cddq$Lo3) / 3; cddq$Lo <- round(cddq$Lo, 2)
cddq$La <- (cddq$La1 + cddq$La2) / 2; cddq$La <- round(cddq$La, 2)
cddq$Iu <- (cddq$Iu1 + cddq$Iu2 + cddq$Iu3) / 3; cddq$Iu <- round(cddq$Iu, 2)
cddq$Ii <- (cddq$Ii1 + cddq$Ii2 + cddq$Ii3 + cddq$Ii4 + cddq$Ii5) / 5; cddq$Ii <- round(cddq$Ii, 2)
cddq$Ie <- (cddq$Ie1 + cddq$Ie2) / 2; cddq$Ie <- round(cddq$Ie, 2)
library(mclust)
colnames(cddq)
file <- cddq[50:50, ]
file <- cddq[50:59, ]
file <- cddq[, 50:59]
partial <- Mclust(file, G = 4)
describe(file)
partial <- Mclust(file, G = 4)
?Mclust
partial <- Mclust(file, G = 2:4)
scale(t(file))
t(scale(t(file)))
x <- t(scale(t(file)))
x <- t(scale(t(file))) %>% as.data.frame
View(x)
partial <- Mclust(x )
partial <- Mclust(x, G = 4 )
partial <- Mclust(x, G = 4 )
partial <- Mclust(x, G = 4 )
x <- scale(file)
partial <- Mclust(x, G = 4 )
partial <- Mclust(file[1:5], G = 4 )
partial <- Mclust(file[2], G = 4 )
partial <- Mclust(file[2, ], G = 4 )
partial <- Mclust(file[1:2, ], G = 4 )
partial <- Mclust(file[2:3, ], G = 4 )
partial <- Mclust(file[3:4, ], G = 4 )
file <- cddq[, 50:59]
partial <- Mclust(file[3:4, ], G = 4 )
library(tidyLPA)
estimate_profiles(x)
estimate_profiles(x, n_profiles = 4)
View(x)
file <- cddq[, 50:59]
file[complete.cases(file)]
file[complete.cases(file), ]
file[!complete.cases(file), ]
file <- cddq[, 50:59]
file <- file[complete.cases(file), ]
x <- t(scale(t(file))) %>% as.data.frame
partial <- Mclust(file[3:4, ], G = 4 )
partial <- Mclust(file, G = 4 )
partial$parameters$mean %>% round(2)
file <- cddq[, 50:59]
file <- file[complete.cases(file), ]
partial$parameters$mean %>% round(2)
partial <- Mclust(file, G = 4 )
partial$parameters$mean %>% round(2)
install.packages("Rserve")
install.packages("shiny")
####################      RELEVANT LIBRARIES AND WORKING DIRECTORY                ####################
remove(list = ls())
library(shiny)
install.packages('shiny')
library(shiny)
install.packages('shiny')
####################      RELEVANT LIBRARIES AND WORKING DIRECTORY                ####################
remove(list = ls())
library(dplyr); library(tidyr); library(ggplot2); library(gridExtra)
graphics.off()
####################      DERIVE THE MAXIMUM LL FROM EACH RANDOM START                ####################
setwd(choose.dir()) # choose the directory "Optimal Likelihood" (pc)
setwd('/Users/nimrodlevin/Desktop/Study 4/Mclust outputs/Optimal Likelihood/') # mac
files <- list.files()
ldf = rep(NA,2) %>% as.data.frame()
for (i in seq(length(files)-1)) {
ldf[1:9, i] <- read.table(as.character(i), sep = ',', header = TRUE)[-1, 2] %>% round(2)
ldf[10:18, i] <- read.table(as.character(i), sep = ',', header = TRUE)[-1, 3] %>% round(2)
}
colnames(ldf) <- paste0("Seed_", seq(length(files)-1))
# And transpose the data set
ldf <- ldf %>% t %>% as.data.frame()
colnames(ldf) <- paste0("S", c(rep(1,9), rep(2, 9)), "_G", rep(2:10))
####################      PLOT THE SOLUTIONS WITH ALL DATA POINTS                ####################
plot1_2 <- ggplot(ldf, aes(x=S1_G2, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_3 <- ggplot(ldf, aes(x=S1_G3, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_4 <- ggplot(ldf, aes(x=S1_G4, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_5 <- ggplot(ldf, aes(x=S1_G5, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_6 <- ggplot(ldf, aes(x=S1_G6, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_7 <- ggplot(ldf, aes(x=S1_G7, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_8 <- ggplot(ldf, aes(x=S1_G8, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_9 <- ggplot(ldf, aes(x=S1_G9, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_10 <- ggplot(ldf, aes(x=S1_G10, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_2 <- ggplot(ldf, aes(x=S2_G2, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_3 <- ggplot(ldf, aes(x=S2_G3, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_4 <- ggplot(ldf, aes(x=S2_G4, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_5 <- ggplot(ldf, aes(x=S2_G5, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_6 <- ggplot(ldf, aes(x=S2_G6, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_7 <- ggplot(ldf, aes(x=S2_G7, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_8 <- ggplot(ldf, aes(x=S2_G8, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_9 <- ggplot(ldf, aes(x=S2_G9, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_10 <- ggplot(ldf, aes(x=S2_G10, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
grid.arrange(plot1_2, plot2_2, plot1_3, plot2_3, plot1_4, plot2_4, plot1_5, plot2_5,
plot1_6, plot2_6, plot1_7, plot2_7, plot1_8, plot2_8, plot1_9, plot2_9, plot1_10, plot2_10,
nrow = 9, ncol = 2)
files <- list.files()
ldf = rep(NA,2) %>% as.data.frame()
for (i in seq(length(files)-2)) {
ldf[1:9, i] <- read.table(as.character(i), sep = ',', header = TRUE)[-1, 2] %>% round(2)
ldf[10:18, i] <- read.table(as.character(i), sep = ',', header = TRUE)[-1, 3] %>% round(2)
}
colnames(ldf) <- paste0("Seed_", seq(length(files)-1))
# And transpose the data set
ldf <- ldf %>% t %>% as.data.frame()
colnames(ldf) <- paste0("S", c(rep(1,9), rep(2, 9)), "_G", rep(2:10))
plot1_2 <- ggplot(ldf, aes(x=S1_G2, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_3 <- ggplot(ldf, aes(x=S1_G3, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_4 <- ggplot(ldf, aes(x=S1_G4, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_5 <- ggplot(ldf, aes(x=S1_G5, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_6 <- ggplot(ldf, aes(x=S1_G6, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_7 <- ggplot(ldf, aes(x=S1_G7, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_8 <- ggplot(ldf, aes(x=S1_G8, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_9 <- ggplot(ldf, aes(x=S1_G9, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_10 <- ggplot(ldf, aes(x=S1_G10, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_2 <- ggplot(ldf, aes(x=S2_G2, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_3 <- ggplot(ldf, aes(x=S2_G3, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_4 <- ggplot(ldf, aes(x=S2_G4, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_5 <- ggplot(ldf, aes(x=S2_G5, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_6 <- ggplot(ldf, aes(x=S2_G6, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_7 <- ggplot(ldf, aes(x=S2_G7, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_8 <- ggplot(ldf, aes(x=S2_G8, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_9 <- ggplot(ldf, aes(x=S2_G9, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_10 <- ggplot(ldf, aes(x=S2_G10, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
grid.arrange(plot1_2, plot2_2, plot1_3, plot2_3, plot1_4, plot2_4, plot1_5, plot2_5,
plot1_6, plot2_6, plot1_7, plot2_7, plot1_8, plot2_8, plot1_9, plot2_9, plot1_10, plot2_10,
nrow = 9, ncol = 2)
