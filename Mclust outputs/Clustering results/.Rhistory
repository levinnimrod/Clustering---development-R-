setwd('/Users/nimrodlevin/Desktop/Study 4/Mclust outputs/Optimal Likelihood/') # mac
files <- list.files()
ldf = rep(NA,2) %>% as.data.frame()
for (i in seq(length(files)-1)) {
ldf[1:9, i] <- read.table(as.character(i), sep = ',', header = TRUE)[-1, 2] %>% round(2)
ldf[10:18, i] <- read.table(as.character(i), sep = ',', header = TRUE)[-1, 3] %>% round(2)
}
colnames(ldf) <- paste0("Seed_", seq(length(files)-1))
# And transpose the data set
ldf <- ldf %>% t %>% as.data.frame()
colnames(ldf) <- paste0("S", c(rep(1,9), rep(2, 9)), "_G", rep(2:10))
####################      PLOT THE SOLUTIONS WITH ALL DATA POINTS                ####################
plot1_2 <- ggplot(ldf, aes(x=S1_G2, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_3 <- ggplot(ldf, aes(x=S1_G3, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_4 <- ggplot(ldf, aes(x=S1_G4, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_5 <- ggplot(ldf, aes(x=S1_G5, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_6 <- ggplot(ldf, aes(x=S1_G6, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_7 <- ggplot(ldf, aes(x=S1_G7, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_8 <- ggplot(ldf, aes(x=S1_G8, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_9 <- ggplot(ldf, aes(x=S1_G9, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_10 <- ggplot(ldf, aes(x=S1_G10, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_2 <- ggplot(ldf, aes(x=S2_G2, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_3 <- ggplot(ldf, aes(x=S2_G3, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_4 <- ggplot(ldf, aes(x=S2_G4, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_5 <- ggplot(ldf, aes(x=S2_G5, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_6 <- ggplot(ldf, aes(x=S2_G6, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_7 <- ggplot(ldf, aes(x=S2_G7, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_8 <- ggplot(ldf, aes(x=S2_G8, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_9 <- ggplot(ldf, aes(x=S2_G9, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_10 <- ggplot(ldf, aes(x=S2_G10, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
grid.arrange(plot1_2, plot2_2, plot1_3, plot2_3, plot1_4, plot2_4, plot1_5, plot2_5,
plot1_6, plot2_6, plot1_7, plot2_7, plot1_8, plot2_8, plot1_9, plot2_9, plot1_10, plot2_10,
nrow = 9, ncol = 2)
####################      RELEVANT LIBRARIES AND WORKING DIRECTORY                ####################
remove(list = ls())
library(dplyr); library(ggplot2); library(lsr)
####################      LOAD THE CLUSTERING SOLUTIONS                ####################
setwd(choose.dir())
files <- list.files()
ldf <- lapply(files, read.csv); remove(files)
####################      LOAD TIDY FILES AND SUBSET FOR THE RELEVANT SAMPLE                ####################
cddq <- file.choose() %>% read.csv
# get only participants with RCA based in the USA
cddq <- cddq[!is.na(cddq$RCA) & cddq$Country == "USA", ]
# remove participants with no difference in responses
url <- file.choose(); source(url)
cddq <- cddq[!exclude(cddq[, c(49:51, 53:56, 58:60)]) == 0, ]; remove(url, exclude)
####################      CREATE TWO RANDOM SAMPLES                ####################
sample1 <- cddq[seq(1, nrow(cddq), by = 2), ]; sample1 <- sample1[, -1];
sample2 <- cddq[seq(2, nrow(cddq), by = 2), ]; sample2 <- sample2[, -1];
remove(cddq)
# get only the variables you need
sample1 <- (sample1[, c(4:5, 8:11, 48:50, 52:55, 57:59, 61)]) %>% round(2)
sample2 <- (sample2[, c(4:5, 8:11, 48:50, 52:55, 57:59, 61)]) %>% round(2)
####################      CALCULATE RI SCORE                ####################
sample1$LI <- (sample1$Lp + sample1$Lo + sample1$Lp + sample1$Ls) / 4 %>% round(2)
sample2$LI <- (sample2$Lp + sample2$Lo + sample2$Lp + sample2$Ls) / 4 %>% round(2)
####################      EXCTRACT CLASSIFICATIONS FROM THE SOLUTIONS                ####################
classifications = data.frame(rep(NA, nrow(ldf[[1]])))
uncertainty = data.frame(rep(NA, nrow(ldf[[1]])))
for (i in seq(18)){
classifications[i] = ldf[[i]]['result.classification']
#  uncertainty[i] = ldf[[i]]['result.uncertainty']
}
classifications <- cbind(classifications[,2:9], classifications[,1], classifications[,11:18], classifications[,10])
colnames(classifications) <- paste0("S", c(rep(1,9), rep(2, 9)), "_G", seq(2,10))
####################      EVALUATE THE MEAN DIFFERENCES - ALL 10 DIMENSIONS               ####################
names <- c(paste0('S1_G', 2:10), paste0('S2_G', 2:10))
# define which two solutions you want to compare (i = ?)
i = 5
# define which two solutions you want to compare (i = ?)
i = 4
# Extract the mean values of the variables for the clustering groups from sample 1
results = cbind(aggregate(sample1[, 7:17], by = as.data.frame(classifications[names[i-1]]),
FUN = sd) %>% round(2), table(classifications[names[i-1]])) %>% arrange(desc(total)) %>% t
# Extract the mean values of the variables for the clustering groups from sample 2
results = results %>% cbind(cbind(aggregate(sample2[, 7:17], by = as.data.frame(classifications[names[i-1+9]]),
FUN = sd) %>% round(2), table(classifications[names[i-1+9]]))  %>% arrange(desc(total)) %>% t)
results[1, ] <- c(rep(1, i), rep(2, i)); results <- t(results) %>% as.data.frame;
results <- arrange(results, desc(total)) %>% t %>% as.data.frame();
results
classifications$S1_G4
results
# define which two solutions you want to compare (i = ?)
i = 4
# Extract the mean values of the variables for the clustering groups from sample 1
results = cbind(aggregate(sample1[, 7:17], by = as.data.frame(classifications[names[i-1]]),
FUN = mean) %>% round(2), table(classifications[names[i-1]])) %>% arrange(desc(total)) %>% t
# Extract the mean values of the variables for the clustering groups from sample 2
results = results %>% cbind(cbind(aggregate(sample2[, 7:17], by = as.data.frame(classifications[names[i-1+9]]),
FUN = mean) %>% round(2), table(classifications[names[i-1+9]]))  %>% arrange(desc(total)) %>% t)
results[1, ] <- c(rep(1, i), rep(2, i)); results <- t(results) %>% as.data.frame;
results <- arrange(results, desc(total)) %>% t %>% as.data.frame();
results
# define which two solutions you want to compare (i = ?)
i = 4
# Extract the mean values of the variables for the clustering groups from sample 1
results = cbind(aggregate(sample1[, 7:17], by = as.data.frame(classifications[names[i-1]]),
FUN = sd) %>% round(2), table(classifications[names[i-1]])) %>% arrange(desc(total)) %>% t
# Extract the mean values of the variables for the clustering groups from sample 2
results = results %>% cbind(cbind(aggregate(sample2[, 7:17], by = as.data.frame(classifications[names[i-1+9]]),
FUN = sd) %>% round(2), table(classifications[names[i-1+9]]))  %>% arrange(desc(total)) %>% t)
results[1, ] <- c(rep(1, i), rep(2, i)); results <- t(results) %>% as.data.frame;
results <- arrange(results, desc(total)) %>% t %>% as.data.frame();
results
ldf[[1]]
ldf[[4]]
ldf[[13]]
ldf[[13]] %>% head
# define which two solutions you want to compare (i = ?)
i = 4
# Extract the mean values of the variables for the clustering groups from sample 1
results = cbind(aggregate(sample1[ldf[[i]]['result.uncertainty'] <= .20, 7:17], by = as.data.frame(classifications[names[i-1]]),
FUN = sd) %>% round(2), table(classifications[names[i-1]])) %>% arrange(desc(total)) %>% t
ldf[[i]]['result.uncertainty'] <= .20, 7:17]
ldf[[i]]['result.uncertainty'] < .20, 7:17]
ldf[[i]]['result.uncertainty'] < .20
nrow(ldff[[1]])
nrow(ldf[[1]])
ldf[[i]]['result.uncertainty'] <= .20 %>% nrow()
ldf[[i]]['result.uncertainty'] <= .20 %>% nrow
ldf[[i]]['result.uncertainty'] <= .20
nrow(ldf[[i]]['result.uncertainty'] <= .20)
# Extract the mean values of the variables for the clustering groups from sample 1
results = cbind(aggregate(sample1[, 7:17], by = as.data.frame(classifications[names[i-1]]),
FUN = sd) %>% round(2), table(classifications[names[i-1]])) %>% arrange(desc(total)) %>% t
results
# Extract the mean values of the variables for the clustering groups from sample 1
results = cbind(aggregate(sample1[(ldf[[i]]['result.uncertainty'] <= .20), 7:17], by = as.data.frame(classifications[names[i-1]][(ldf[[i]]['result.uncertainty'] <= .20)]),
FUN = sd) %>% round(2), table(classifications[names[i-1]])) %>% arrange(desc(total)) %>% t
results
# Extract the mean values of the variables for the clustering groups from sample 1
results = cbind(aggregate(sample1[(ldf[[i]]['result.uncertainty'] <= .20), 7:17], by = as.data.frame(classifications[names[i-1]][(ldf[[i]]['result.uncertainty'] <= .20)]),
FUN = mean) %>% round(2), table(classifications[names[i-1]])) %>% arrange(desc(total)) %>% t
results
# Extract the mean values of the variables for the clustering groups from sample 1
results = cbind(aggregate(sample1[(ldf[[i]]['result.uncertainty'] <= .20), 7:17], by = as.data.frame(classifications[names[i-1]][(ldf[[i]]['result.uncertainty'] <= .20)]),
FUN = sd) %>% round(2), table(classifications[names[i-1]])) %>% arrange(desc(total)) %>% t
results
####################      EVALUATE THE MEAN DIFFERENCES - ALL 10 DIMENSIONS               ####################
names <- c(paste0('S1_G', 2:10), paste0('S2_G', 2:10))
# define which two solutions you want to compare (i = ?)
i = 4
# Extract the mean values of the variables for the clustering groups from sample 1
results = cbind(aggregate(sample1[(ldf[[i]]['result.uncertainty'] <= .20), 7:17], by = as.data.frame(classifications[names[i-1]][(ldf[[i]]['result.uncertainty'] <= .20)]),
FUN = sd) %>% round(2), table(classifications[names[i-1]])) %>% arrange(desc(total)) %>% t
# Extract the mean values of the variables for the clustering groups from sample 2
results = results %>% cbind(cbind(aggregate(sample2[, 7:17], by = as.data.frame(classifications[names[i-1+9]]),
FUN = sd) %>% round(2), table(classifications[names[i-1+9]]))  %>% arrange(desc(total)) %>% t)
results[1, ] <- c(rep(1, i), rep(2, i)); results <- t(results) %>% as.data.frame;
results <- arrange(results, desc(total)) %>% t %>% as.data.frame();
results
library(dplyr); library(data.table); library(ggplot2); library(lsr)
####################      LOAD THE CLUSTERING SOLUTIONS                ####################
setwd(choose.dir())
files <- list.files()
ldf <- lapply(files, read.csv); remove(files)
####################      LOAD TIDY FILES AND SUBSET FOR THE RELEVANT SAMPLE                ####################
cddq <- file.choose() %>% read.csv
getwd)
getwd()
../
list.files(../)
list.files('../')
list.files('.../')
list.files('..//')
list.files('.././')
list.files('../../')
list.files('/../../')
list.files('/../')
list.files('//')
list.files('/')
list.files('./')
list.files('/')
list.files('./')
list.files('/.')
list.files('../')
list.files('..//')
list.files('..///')
list.files('.../')
list.files('.././')
list.files('../../')
list.files('../../../')
####################      LOAD TIDY FILES AND SUBSET FOR THE RELEVANT SAMPLE                ####################
cddq <- read.csv('../../../df.csv')
# get only participants with RCA based in the USA
cddq <- cddq[!is.na(cddq$RCA) & cddq$Country == "USA", ]
# remove participants with no difference in responses
url <- file.choose(); source(url)
list.files('/../../')
list.files('../../')
list.files('../../R Scripts/')
# remove participants with no difference in responses
source('../../R Scripts/zero-variance validity check (function).R')
cddq <- cddq[!exclude(cddq[, c(49:51, 53:56, 58:60)]) == 0, ]; remove(url, exclude)
# remove participants with no difference in responses
source('../../R Scripts/zero-variance validity check (function).R')
cddq <- cddq[!exclude(cddq[, c(49:51, 53:56, 58:60)]) == 0, ]; remove(exclude)
####################      CREATE TWO RANDOM SAMPLES                ####################
sample1 <- cddq[seq(1, nrow(cddq), by = 2), ]; sample1 <- sample1[, -1];
sample2 <- cddq[seq(2, nrow(cddq), by = 2), ]; sample2 <- sample2[, -1];
remove(cddq)
# get only the variables you need
sample1 <- (sample1[, c(4:5, 8:11, 48:50, 52:55, 57:59, 61)]) %>% round(2)
sample2 <- (sample2[, c(4:5, 8:11, 48:50, 52:55, 57:59, 61)]) %>% round(2)
####################      CALCULATE RI SCORE                ####################
sample1$LI <- (sample1$Lp + sample1$Lo + sample1$Lp + sample1$Ls) / 4 %>% round(2)
####################      RELEVANT LIBRARIES AND WORKING DIRECTORY                ####################
remove(list = ls())
library(dplyr); library(data.table); library(ggplot2); library(lsr)
####################      LOAD THE CLUSTERING SOLUTIONS                ####################
setwd(choose.dir())
files <- list.files()
ldf <- lapply(files, read.csv); remove(files)
####################      LOAD TIDY FILES AND SUBSET FOR THE RELEVANT SAMPLE                ####################
cddq <- read.csv('../../../df.csv')
# get only participants with RCA based in the USA
cddq <- cddq[!is.na(cddq$RCA) & cddq$Country == "USA", ]
# remove participants with no difference in responses
source('../../R Scripts/zero-variance validity check (function).R')
cddq <- cddq[!exclude(cddq[, c(49:51, 53:56, 58:60)]) == 0, ]; remove(exclude)
####################      CREATE TWO RANDOM SAMPLES                ####################
sample1 <- cddq[seq(1, nrow(cddq), by = 2), ]; sample1 <- sample1[, -1];
sample2 <- cddq[seq(2, nrow(cddq), by = 2), ]; sample2 <- sample2[, -1];
remove(cddq)
# get only the variables you need
sample1 <- (sample1[, c(4:5, 8:11, 48:50, 52:55, 57:59, 61)]) %>% round(2)
sample2 <- (sample2[, c(4:5, 8:11, 48:50, 52:55, 57:59, 61)]) %>% round(2)
####################      EXCTRACT CLASSIFICATIONS FROM THE SOLUTIONS                ####################
classifications = data.frame(rep(NA, nrow(ldf[[1]])))
uncertainty = data.frame(rep(NA, nrow(ldf[[1]])))
for (i in seq(18)){
classifications[i] = ldf[[i]]['result.classification']
#  uncertainty[i] = ldf[[i]]['result.uncertainty']
}
classifications <- cbind(classifications[,2:9], classifications[,1], classifications[,11:18], classifications[,10])
colnames(classifications) <- paste0("S", c(rep(1,9), rep(2, 9)), "_G", seq(2,10))
sample1 %>% head
classifications
table(classifications$S1_G4, classifications$S1_G5)
####################      LOAD TIDY FILES AND SUBSET FOR THE RELEVANT SAMPLE                ####################
cddq <- fread('../../../df.csv')
####################      LOAD THE CLUSTERING SOLUTIONS                ####################
setwd(choose.dir())
files <- list.files()
ldf <- lapply(files, fread); remove(files)
####################      LOAD TIDY FILES AND SUBSET FOR THE RELEVANT SAMPLE                ####################
cddq <- fread('../../../df.csv')
# get only participants with RCA based in the USA
cddq <- cddq[!is.na(cddq$RCA) & cddq$Country == "USA"]
# remove participants with no difference in responses
source('../../R Scripts/zero-variance validity check (function).R')
cddq <- cddq[!exclude(cddq[, c(49:51, 53:56, 58:60)]) == 0]; remove(exclude)
files <- list.files()
ldf <- lapply(files, read.csv); remove(files)
####################      LOAD TIDY FILES AND SUBSET FOR THE RELEVANT SAMPLE                ####################
cddq <- read.csv('../../../df.csv')
# get only participants with RCA based in the USA
cddq <- cddq[!is.na(cddq$RCA) & cddq$Country == "USA", ]
# remove participants with no difference in responses
source('../../R Scripts/zero-variance validity check (function).R')
cddq <- cddq[!exclude(cddq[, c(49:51, 53:56, 58:60)]) == 0, ]; remove(exclude)
files <- list.files()
ldf <- lapply(files, fread); remove(files)
####################      LOAD TIDY FILES AND SUBSET FOR THE RELEVANT SAMPLE                ####################
cddq <- fread('../../../df.csv')
# get only participants with RCA based in the USA
cddq <- cddq[!is.na(cddq$RCA) & cddq$Country == "USA"]
# remove participants with no difference in responses
source('../../R Scripts/zero-variance validity check (function).R')
cddq <- cddq[!exclude(cddq[, c(49:51, 53:56, 58:60)]) == 0, ]; remove(exclude)
####################      LOAD TIDY FILES AND SUBSET FOR THE RELEVANT SAMPLE                ####################
cddq <- read.csv('../../../df.csv')
# get only participants with RCA based in the USA
cddq <- cddq[!is.na(cddq$RCA) & cddq$Country == "USA", ]
# remove participants with no difference in responses
source('../../R Scripts/zero-variance validity check (function).R')
cddq <- cddq[!exclude(cddq[, c(49:51, 53:56, 58:60)]) == 0, ]; remove(exclude)
files <- list.files()
ldf <- lapply(files, fread); remove(files)
####################      LOAD TIDY FILES AND SUBSET FOR THE RELEVANT SAMPLE                ####################
cddq <- fread('../../../df.csv')
# get only participants with RCA based in the USA
cddq <- cddq[!is.na(cddq$RCA) & cddq$Country == "USA"]
# remove participants with no difference in responses
source('../../R Scripts/zero-variance validity check (function).R')
cddq <- cddq[!exclude(cddq[, c(49:51, 53:56, 58:60)]) == 0, ]; remove(exclude)
exclude
rowsums(cddq)
rowSums(cddq)
files <- list.files()
ldf <- lapply(files, fread); remove(files)
####################      LOAD TIDY FILES AND SUBSET FOR THE RELEVANT SAMPLE                ####################
cddq <- fread('../../../df.csv')
# get only participants with RCA based in the USA
cddq <- cddq[!is.na(cddq$RCA) & cddq$Country == "USA", ]
# remove participants with no difference in responses
source('../../R Scripts/zero-variance validity check (function).R')
# remove participants with no difference in responses
source('../../R Scripts/zero-variance validity check (function).R')
cddq <- cddq[!exclude(cddq[c(49:51, 53:56, 58:60)]) == 0, ]; remove(exclude)
cddq <- cddq[!exclude(cddq[c(49:51, 53:56, 58:60)]) == 0]; remove(exclude)
cddq <- cddq[!exclude(cddq[, c(49:51, 53:56, 58:60)]) == 0]; remove(exclude)
cddq[c(49:59)]
cddq[, c(49:59)]
exclude(cddq[, c(49:51, 53:56, 58:60)]) == 0
cddq[, c(49:51, 53:56, 58:60)]
cddq[c(49:51, 53:56, 58:60)]
cddq[, c(49:51, 53:56, 58:60)]
exclude(cddq[, c(49:51, 53:56, 58:60)])
####################      LOAD TIDY FILES AND SUBSET FOR THE RELEVANT SAMPLE                ####################
cddq <- read.csv('../../../df.csv')
# get only participants with RCA based in the USA
cddq <- cddq[!is.na(cddq$RCA) & cddq$Country == "USA", ]
# remove participants with no difference in responses
source('../../R Scripts/zero-variance validity check (function).R')
cddq <- cddq[!exclude(cddq[, c(49:51, 53:56, 58:60)]) == 0]; remove(exclude)
cddq <- cddq[!exclude(cddq[, c(49:51, 53:56, 58:60)]) == 0, ]; remove(exclude)
####################      CREATE TWO RANDOM SAMPLES                ####################
sample1 <- cddq[seq(1, nrow(cddq), by = 2), ]; sample1 <- sample1[, -1];
sample2 <- cddq[seq(2, nrow(cddq), by = 2), ]; sample2 <- sample2[, -1];
remove(cddq)
# get only the variables you need
sample1 <- (sample1[, c(4:5, 8:11, 48:50, 52:55, 57:59, 61)]) %>% round(2)
sample2 <- (sample2[, c(4:5, 8:11, 48:50, 52:55, 57:59, 61)]) %>% round(2)
####################      EXCTRACT CLASSIFICATIONS FROM THE SOLUTIONS                ####################
classifications = data.frame(rep(NA, nrow(ldf[[1]])))
uncertainty = data.frame(rep(NA, nrow(ldf[[1]])))
for (i in seq(18)){
classifications[i] = ldf[[i]]['result.classification']
#  uncertainty[i] = ldf[[i]]['result.uncertainty']
}
classifications <- cbind(classifications[,2:9], classifications[,1], classifications[,11:18], classifications[,10])
####################      EXCTRACT CLASSIFICATIONS FROM THE SOLUTIONS                ####################
classifications = data.frame(rep(NA, nrow(ldf[[1]])))
uncertainty = data.frame(rep(NA, nrow(ldf[[1]])))
exclude(cddq[, c(49:51, 53:56, 58:60)]);df[[1]]
ldf[[1]]
####################      EXCTRACT CLASSIFICATIONS FROM THE SOLUTIONS                ####################
classifications = data.frame(rep(NA, nrow(ldf[[1]])))
uncertainty = data.frame(rep(NA, nrow(ldf[[1]])))
for (i in seq(18)){
classifications[i] = ldf[[i]]['result.classification']
#  uncertainty[i] = ldf[[i]]['result.uncertainty']
}
files <- list.files()
ldf <- lapply(files, read.csv); remove(files)
####################      LOAD TIDY FILES AND SUBSET FOR THE RELEVANT SAMPLE                ####################
cddq <- read.csv('../../../df.csv')
# get only participants with RCA based in the USA
cddq <- cddq[!is.na(cddq$RCA) & cddq$Country == "USA", ]
# remove participants with no difference in responses
source('../../R Scripts/zero-variance validity check (function).R')
cddq <- cddq[!exclude(cddq[, c(49:51, 53:56, 58:60)]) == 0, ]; remove(exclude)
####################      CREATE TWO RANDOM SAMPLES                ####################
sample1 <- cddq[seq(1, nrow(cddq), by = 2), ]; sample1 <- sample1[, -1];
sample2 <- cddq[seq(2, nrow(cddq), by = 2), ]; sample2 <- sample2[, -1];
remove(cddq)
# get only the variables you need
sample1 <- (sample1[, c(4:5, 8:11, 48:50, 52:55, 57:59, 61)]) %>% round(2)
sample2 <- (sample2[, c(4:5, 8:11, 48:50, 52:55, 57:59, 61)]) %>% round(2)
####################      EXCTRACT CLASSIFICATIONS FROM THE SOLUTIONS                ####################
classifications = data.frame(rep(NA, nrow(ldf[[1]])))
uncertainty = data.frame(rep(NA, nrow(ldf[[1]])))
for (i in seq(18)){
classifications[i] = ldf[[i]]['result.classification']
#  uncertainty[i] = ldf[[i]]['result.uncertainty']
}
classifications <- cbind(classifications[,2:9], classifications[,1], classifications[,11:18], classifications[,10])
colnames(classifications) <- paste0("S", c(rep(1,9), rep(2, 9)), "_G", seq(2,10))
?subset
classifications$S1_G4
classifications$S1_G4 == 4
logic <- classifications$S1_G4 == 4
classifications$S1_G4
ldf[[4]]
ggplot(data = ldf[[4]], aes(ldf[[4]]$result.uncertainty)) +
geom_histogram()
ggplot(data = ldf[[4]], aes(ldf[[4]]$result.uncertainty)) +
geom_histogram(breaks = seq(0.1, 1, by = 0.05))
ggplot(data = ldf[[4]], aes(ldf[[4]]$result.uncertainty)) +
geom_histogram(breaks = seq(0.1, 1, by = 0.01))
ggplot(data = ldf[[4]], aes(ldf[[4]]$result.uncertainty)) +
geom_histogram(breaks = seq(0.1, max(ldf[[4]]$result.uncertainty), by = 0.01))
table(ldf[[4]]$result.classification)
data <- ldf[[4]][ldf[[4]]$result.classification == 1]
ldf[[4]]
[ldf[[4]]$result.classification == 1]
[ldf[[4]]$result.classification == 1, ]
[,ldf[[4]]$result.classification == 1]
[ldf[[4]]$result.classification == 1]
ldf[[4]]$result.classification == 1]
ldf[[4]]$result.classification == 1
data <- ldf[[4]][ldf[[4]]$result.classification == 1]
ggplot(data = ldf[[4]], aes(ldf[[4]]$result.uncertainty)) +
geom_histogram(breaks = seq(0.1, max(ldf[[4]]$result.uncertainty), by = 0.01))
data <- ldf[[4]]
data <- ldf[[4]][ldf[[4]]$result.classification == 1, 1]
ggplot(data = data, aes(data$result.uncertainty)) +
geom_histogram(breaks = seq(0.1, max(ldf[[4]]$result.uncertainty), by = 0.01))
data <- ldf[[4]][ldf[[4]]$result.classification == 1, 1]
ggplot(data = data, aes(data$result.uncertainty)) +
geom_histogram(breaks = seq(0.1, max(data$result.uncertainty), by = 0.01))
temp <- ldf[[4]][ldf[[4]]$result.classification == 1, 1]
temp <- ldf[[4]][ldf[[4]]$result.classification == 1, 1] %>% as.data.frame()
temp
temp %>% head
temp <- ldf[[4]][ldf[[4]]$result.classification == 1, ] %>% as.data.frame()
temp %>% head
ggplot(data = temp, aes(temp$result.uncertainty)) +
geom_histogram(breaks = seq(0.1, max(temp$result.uncertainty), by = 0.01))
ggplot(data = temp, aes(temp$result.uncertainty)) +
geom_histogram(breaks = seq(0.1, max(temp$result.uncertainty), by = 0.01),
col = temp$result.classification)
temp <- ldf[[4]][ldf[[4]]$result.classification == 1, ] %>% as.data.frame()
temp <- ldf[[4]]
temp <- ldf[[4]] %>% cbind(ldf[[5]]$result.classification)
temp
temp %>% head
temp <- ldf[[4]][ldf[[4]]$result.classification == 1, ] %>% as.data.frame()
temp <- ldf[[4]] %>% cbind(ldf[[5]]$result.classification)
temp <- ldf[[4]][ldf[[4]]$result.classification == 1, ] %>% as.data.frame()
temp %>% head
temp <- ldf[[4]] %>% cbind(ldf[[5]]$result.classification)
temp <- temp[temp$result.classification == 1, ] %>% as.data.frame()
ggplot(data = temp, aes(temp$result.uncertainty)) +
geom_histogram(breaks = seq(0.1, max(temp$result.uncertainty), by = 0.01),
col = temp$`ldf[[5]]$result.classification`)
ggplot(data = temp, aes(result.uncertainty)) +
geom_histogram(breaks = seq(0.1, max(temp$result.uncertainty), by = 0.01),
col = temp$`ldf[[5]]$result.classification`)
ggplot(data = temp, aes(result.uncertainty)) +
geom_histogram(breaks = seq(0.1, max(temp$result.uncertainty), by = 0.01),
fill = temp$`ldf[[5]]$result.classification`)
ggplot(data = temp, aes(temp$result.uncertainty)) +
geom_histogram(breaks = seq(0.1, max(temp$result.uncertainty), by = 0.01),
fill = temp$`ldf[[5]]$result.classification`)
ggplot(data = temp, aes(temp$result.uncertainty)) +
geom_histogram(breaks = seq(0.1, max(temp$result.uncertainty), by = 0.01),
#                 fill = temp$`ldf[[5]]$result.classification`)
)
ggplot(data = temp, aes(temp$result.uncertainty)) +
geom_histogram(breaks = seq(0.1, max(result.uncertainty), by = 0.01),
#                 fill = temp$`ldf[[5]]$result.classification`)
)
ggplot(data = temp, aes(result.uncertainty)) +
geom_histogram(breaks = seq(0.1, max(temp$result.uncertainty), by = 0.01),
#                 fill = temp$`ldf[[5]]$result.classification`)
)
ggplot(data = temp, aes(result.uncertainty, fill = `ldf[[5]]$result.classification`
)) +
geom_histogram(breaks = seq(0.1, max(temp$result.uncertainty), by = 0.01),
#                 fill = temp$`ldf[[5]]$result.classification`)
)
temp$`ldf[[5]]$result.classification`
ggplot(data = temp, aes(result.uncertainty, fill = temp$`ldf[[5]]$result.classification`
)) +
geom_histogram(breaks = seq(0.1, max(temp$result.uncertainty), by = 0.01),
#                 fill = temp$`ldf[[5]]$result.classification`)
)
ggplot(data = temp, aes(result.uncertainty, fill = as.factor(temp$`ldf[[5]]$result.classification`)
)) +
geom_histogram(breaks = seq(0.1, max(temp$result.uncertainty), by = 0.01),
#                 fill = temp$`ldf[[5]]$result.classification`)
)
ggplot(data = temp, aes(result.uncertainty, fill = as.factor(`ldf[[5]]$result.classification`)
)) +
geom_histogram(breaks = seq(0.1, max(temp$result.uncertainty), by = 0.01),
#                 fill = temp$`ldf[[5]]$result.classification`)
)
ggplot(data = temp, aes(result.uncertainty, fill = as.factor(`ldf[[5]]$result.classification`)
)) +
geom_histogram(breaks = seq(0.1, max(temp$result.uncertainty), by = 0.01))
ggplot(data = temp, aes(result.uncertainty, fill = as.factor(`ldf[[5]]$result.classification`)
)) +
geom_histogram(breaks = seq(0, max(temp$result.uncertainty), by = 0.01))
