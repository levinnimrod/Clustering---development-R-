cddq <- cddq[!is.na(cddq$RCA) & cddq$Country == "USA", ]
# remove participants with no difference in responses
url <- file.choose(); source(url)
cddq <- cddq[!exclude(cddq[, c(49:51, 53:56, 58:60)]) == 0, ]; remove(url, exclude)
####################      CREATE TWO RANDOM SAMPLES                ####################
sample1 <- cddq[seq(1, nrow(cddq), by = 2), ]; sample1 <- sample1[, -1];
sample2 <- cddq[seq(2, nrow(cddq), by = 2), ]; sample2 <- sample2[, -1];
remove(cddq)
# get only the variables you need
sample1 <- (sample1[, c(4:5, 8:11, 48:50, 52:55, 57:59, 61)]) %>% round(2)
sample2 <- (sample2[, c(4:5, 8:11, 48:50, 52:55, 57:59, 61)]) %>% round(2)
####################      CALCULATE RI SCORE                ####################
sample1$LI <- (sample1$Lp + sample1$Lo + sample1$Lp + sample1$Ls) / 4 %>% round(2)
sample2$LI <- (sample2$Lp + sample2$Lo + sample2$Lp + sample2$Ls) / 4 %>% round(2)
####################      EXCTRACT CLASSIFICATIONS FROM THE SOLUTIONS                ####################
classifications = data.frame(rep(NA, nrow(ldf[[1]])))
uncertainty = data.frame(rep(NA, nrow(ldf[[1]])))
for (i in seq(18)){
classifications[i] = ldf[[i]]['result.classification']
uncertainty[i] = ldf[[i]]['result.uncertainty']
}
classifications <- cbind(classifications[,2:9], classifications[,1], classifications[,11:18], classifications[,10])
colnames(classifications) <- paste0("S", c(rep(1,9), rep(2, 9)), "_G", seq(2,10))
####################      EVALUATE THE MEAN DIFFERENCES - Ri, Rd, LI, Ie                ####################
names <- c(paste0('S1_G', 2:10), paste0('S2_G', 2:10))
####################      EXCTRACT CLASSIFICATIONS FROM THE SOLUTIONS                ####################
classifications = data.frame(rep(NA, nrow(ldf[[1]])))
uncertainty = data.frame(rep(NA, nrow(ldf[[1]])))
for (i in seq(18)){
classifications[i] = ldf[[i]]['result.classification']
uncertainty[i] = ldf[[i]]['result.uncertainty']
}
ldf[[1]]
for (i in seq(2)){
classifications[i] = ldf[[i]]['result.classification']
uncertainty[i] = ldf[[i]]['result.uncertainty']
}
for (i in seq(18)){
classifications[i] = ldf[[i]]['result.classification']
#  uncertainty[i] = ldf[[i]]['result.uncertainty']
}
classifications <- cbind(classifications[,2:9], classifications[,1], classifications[,11:18], classifications[,10])
colnames(classifications) <- paste0("S", c(rep(1,9), rep(2, 9)), "_G", seq(2,10))
####################      EVALUATE THE MEAN DIFFERENCES - Ri, Rd, LI, Ie                ####################
names <- c(paste0('S1_G', 2:10), paste0('S2_G', 2:10))
aggregate(sample1$RCA, by = as.data.frame(classifications$S1_G4))
aggregate(sample1$RCA, by = as.data.frame(classifications$S1_G4), FUN = mean) %>% round(2)
####################      EVALUATE THE MEAN DIFFERENCES - Ri, Rd, LI, Ie                ####################
names <- c(paste0('S1_G', 2:10), paste0('S2_G', 2:10))
# define which two solutions you want to compare (i = ?)
i = 4
aggregate(sample1[c('Ri', 'Rd', 'LI', 'Ie')], by = as.data.frame(classifications[names[i-1]]), FUN = mean)
# Extract the mean values of the variables for the clustering groups from sample 1
results = cbind(aggregate(sample1[c('Ri', 'Rd', 'LI', 'Ie', 'total')], by = as.data.frame(classifications[names[i-1]]),
FUN = mean) %>% round(2), table(classifications[names[i-1]])) %>% arrange(desc(total)) %>% t
# Extract the mean values of the variables for the clustering groups from sample 2
results = results %>% cbind(cbind(aggregate(sample2[c('Ri', 'Rd', 'LI', 'Ie', 'total')], by = as.data.frame(classifications[names[i-1+9]]),
FUN = mean) %>% round(2), table(classifications[names[i-1+9]])) %>% arrange(desc(total)) %>% t)
results[1, ] <- c(rep(1, i), rep(2, i)); results <- t(results) %>% as.data.frame;
results <- arrange(results, desc(total)) %>% t %>% as.data.frame();
results
# define which two solutions you want to compare (i = ?)
i = 5
aggregate(sample1[c('Ri', 'Rd', 'LI', 'Ie')], by = as.data.frame(classifications[names[i-1]]), FUN = mean)
# Extract the mean values of the variables for the clustering groups from sample 1
results = cbind(aggregate(sample1[c('Ri', 'Rd', 'LI', 'Ie', 'total')], by = as.data.frame(classifications[names[i-1]]),
FUN = mean) %>% round(2), table(classifications[names[i-1]])) %>% arrange(desc(total)) %>% t
# Extract the mean values of the variables for the clustering groups from sample 2
results = results %>% cbind(cbind(aggregate(sample2[c('Ri', 'Rd', 'LI', 'Ie', 'total')], by = as.data.frame(classifications[names[i-1+9]]),
FUN = mean) %>% round(2), table(classifications[names[i-1+9]])) %>% arrange(desc(total)) %>% t)
results[1, ] <- c(rep(1, i), rep(2, i)); results <- t(results) %>% as.data.frame;
results <- arrange(results, desc(total)) %>% t %>% as.data.frame();
results
aggregate(sample1$RCA, by = as.data.frame(classifications$S1_G5), FUN = mean) %>% round(2)
aggregate(sample2$RCA, by = as.data.frame(classifications$S2_G5), FUN = mean) %>% round(2)
# define which two solutions you want to compare (i = ?)
i = 6
aggregate(sample1[c('Ri', 'Rd', 'LI', 'Ie')], by = as.data.frame(classifications[names[i-1]]), FUN = mean)
# Extract the mean values of the variables for the clustering groups from sample 1
results = cbind(aggregate(sample1[c('Ri', 'Rd', 'LI', 'Ie', 'total')], by = as.data.frame(classifications[names[i-1]]),
FUN = mean) %>% round(2), table(classifications[names[i-1]])) %>% arrange(desc(total)) %>% t
# Extract the mean values of the variables for the clustering groups from sample 2
results = results %>% cbind(cbind(aggregate(sample2[c('Ri', 'Rd', 'LI', 'Ie', 'total')], by = as.data.frame(classifications[names[i-1+9]]),
FUN = mean) %>% round(2), table(classifications[names[i-1+9]])) %>% arrange(desc(total)) %>% t)
results[1, ] <- c(rep(1, i), rep(2, i)); results <- t(results) %>% as.data.frame;
results <- arrange(results, desc(total)) %>% t %>% as.data.frame();
results
aggregate(sample1$RCA, by = as.data.frame(classifications$S1_G6), FUN = mean) %>% round(2)
aggregate(sample2$RCA, by = as.data.frame(classifications$S2_G6), FUN = mean) %>% round(2)
# define which two solutions you want to compare (i = ?)
i = 4
aggregate(sample1[c('Ri', 'Rd', 'LI', 'Ie')], by = as.data.frame(classifications[names[i-1]]), FUN = mean)
# Extract the mean values of the variables for the clustering groups from sample 1
results = cbind(aggregate(sample1[c('Ri', 'Rd', 'LI', 'Ie', 'total')], by = as.data.frame(classifications[names[i-1]]),
FUN = mean) %>% round(2), table(classifications[names[i-1]])) %>% arrange(desc(total)) %>% t
# Extract the mean values of the variables for the clustering groups from sample 2
results = results %>% cbind(cbind(aggregate(sample2[c('Ri', 'Rd', 'LI', 'Ie', 'total')], by = as.data.frame(classifications[names[i-1+9]]),
FUN = mean) %>% round(2), table(classifications[names[i-1+9]])) %>% arrange(desc(total)) %>% t)
results[1, ] <- c(rep(1, i), rep(2, i)); results <- t(results) %>% as.data.frame;
results <- arrange(results, desc(total)) %>% t %>% as.data.frame();
results
aggregate(sample2$RCA, by = as.data.frame(classifications$S2_G4), FUN = mean) %>% round(2)
####################      RELEVANT LIBRARIES AND WORKING DIRECTORY                ####################
remove(list = ls())
library(dplyr); library(tidyr); library(ggplot2); library(gridExtra)
graphics.off()
####################      DERIVE THE MAXIMUM LL FROM EACH RANDOM START                ####################
setwd(choose.dir()) # choose the directory "Optimal Likelihood" (pc)
setwd('/Users/nimrodlevin/Desktop/Study 4/Mclust outputs/Optimal Likelihood/') # mac
files <- list.files()
ldf = rep(NA,2) %>% as.data.frame()
for (i in seq(length(files)-1)) {
ldf[1:9, i] <- read.table(as.character(i), sep = ',', header = TRUE)[-1, 2] %>% round(2)
ldf[10:18, i] <- read.table(as.character(i), sep = ',', header = TRUE)[-1, 3] %>% round(2)
}
colnames(ldf) <- paste0("Seed_", seq(length(files)-1))
# And transpose the data set
ldf <- ldf %>% t %>% as.data.frame()
colnames(ldf) <- paste0("S", c(rep(1,9), rep(2, 9)), "_G", rep(2:10))
####################      PLOT THE SOLUTIONS WITH ALL DATA POINTS                ####################
plot1_2 <- ggplot(ldf, aes(x=S1_G2, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_3 <- ggplot(ldf, aes(x=S1_G3, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_4 <- ggplot(ldf, aes(x=S1_G4, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_5 <- ggplot(ldf, aes(x=S1_G5, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_6 <- ggplot(ldf, aes(x=S1_G6, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_7 <- ggplot(ldf, aes(x=S1_G7, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_8 <- ggplot(ldf, aes(x=S1_G8, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_9 <- ggplot(ldf, aes(x=S1_G9, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_10 <- ggplot(ldf, aes(x=S1_G10, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_2 <- ggplot(ldf, aes(x=S2_G2, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_3 <- ggplot(ldf, aes(x=S2_G3, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_4 <- ggplot(ldf, aes(x=S2_G4, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_5 <- ggplot(ldf, aes(x=S2_G5, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_6 <- ggplot(ldf, aes(x=S2_G6, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_7 <- ggplot(ldf, aes(x=S2_G7, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_8 <- ggplot(ldf, aes(x=S2_G8, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_9 <- ggplot(ldf, aes(x=S2_G9, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_10 <- ggplot(ldf, aes(x=S2_G10, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
grid.arrange(plot1_2, plot2_2, plot1_3, plot2_3, plot1_4, plot2_4, plot1_5, plot2_5,
plot1_6, plot2_6, plot1_7, plot2_7, plot1_8, plot2_8, plot1_9, plot2_9, plot1_10, plot2_10,
nrow = 9, ncol = 2)
# get the relevant files with the probabilities for cluster assignment
#files <- paste0('..\\Clustering results\\', list.files('..\\Clustering results')) # pc
files <- paste0('../Clustering results/', list.files('../Clustering results')) # mac
ldf <- lapply(files, read.csv); remove(files)
# extract the maximum p and the second maximum p and calculate its ratio
i = 6; limit <- ldf[[i]] %>% ncol - 2
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
result <- result[, limit-1] / result[, limit-2]; result <- result < 2
# summarize results by groups (count of ratios smaller than 2)
aggregate(result, by = as.data.frame(ldf[[i]]['result.classification']), FUN = sum)
table(ldf[[i]]['result.classification'])
sum(ldf[[15]]['result.uncertainty'] > .20)/44
results <- ldf[[13]][2:6] %>% apply(MARGIN = 1, sort); results <- results %>% t
sum(results[,5] < .80 )/4459
ldf[[15]]
# extract the maximum p and the second maximum p and calculate its ratio
i = 4; limit <- ldf[[i]] %>% ncol - 2
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
result <- result[, limit-1] / result[, limit-2]; result <- result < 2
results
# get the relevant files with the probabilities for cluster assignment
#files <- paste0('..\\Clustering results\\', list.files('..\\Clustering results')) # pc
files <- paste0('../Clustering results/', list.files('../Clustering results')) # mac
ldf <- lapply(files, read.csv); remove(files)
# extract the maximum p and the second maximum p and calculate its ratio
i = 4; limit <- ldf[[i]] %>% ncol - 2
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
result
# extract the maximum p and the second maximum p and calculate its ratio
i = 4; limit <- ldf[[i]] %>% ncol - 2
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
result
result %>% head
# extract the maximum p and the second maximum p and calculate its ratio
i = 4; limit <- ldf[[i]] %>% ncol - 2
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
result <- result[, limit-1] / result[, limit-2]; result <- result < 2
# extract the maximum p and the second maximum p and calculate its ratio
i = 4; limit <- ldf[[i]] %>% ncol - 1
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
result %>% head
aggregate(result[, limit-1], by = result[, limit], FUN = mean)
result[, limit-1]
aggregate(result[, limit-2], by = result[, limit-1], FUN = mean)
aggregate(result[, limit-2], by = as.data.frame(result[, limit-1]), FUN = mean)
aggregate(result[, limit-2] < .80, by = as.data.frame(result[, limit-1]), FUN = mean)
aggregate(result[, limit-2] < .80, by = as.data.frame(result[, limit-1]), FUN = mean)
table(result[, limit-1])
# extract the maximum p and the second maximum p and calculate its ratio
i = 10; limit <- ldf[[i]] %>% ncol - 1
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
aggregate(result[, limit-2] < .80, by = as.data.frame(result[, limit-1]), FUN = mean)
# extract the maximum p and the second maximum p and calculate its ratio
i = 11; limit <- ldf[[i]] %>% ncol - 1
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
aggregate(result[, limit-2] < .80, by = as.data.frame(result[, limit-1]), FUN = mean)
table(result[, limit-1])
# extract the maximum p and the second maximum p and calculate its ratio
i = 11; limit <- ldf[[i]] %>% ncol - 1
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
aggregate(result[, limit-2] < .80, by = as.data.frame(result[, limit-1]), FUN = mean)
# extract the maximum p and the second maximum p and calculate its ratio
i = 11; limit <- ldf[[i]] %>% ncol - 2
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
aggregate(result[, limit-2] < .80, by = as.data.frame(result[, limit-1]), FUN = mean)
# extract the maximum p and the second maximum p and calculate its ratio
i = 11; limit <- ldf[[i]] %>% ncol - 2
ldf[[4]]
ldf[[11]]
ldf[[13]]
# extract the maximum p and the second maximum p and calculate its ratio
i = 13; limit <- ldf[[i]] %>% ncol - 1
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
aggregate(result[, limit-2] < .80, by = as.data.frame(result[, limit-1]), FUN = mean)
table(result[, limit-1])
# extract the maximum p and the second maximum p and calculate its ratio
i = 5; limit <- ldf[[i]] %>% ncol - 1
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
aggregate(result[, limit-2] < .80, by = as.data.frame(result[, limit-1]), FUN = mean)
table(result[, limit-1])
# extract the maximum p and the second maximum p and calculate its ratio
i = 14; limit <- ldf[[i]] %>% ncol - 1
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
aggregate(result[, limit-2] < .80, by = as.data.frame(result[, limit-1]), FUN = mean)
# extract the maximum p and the second maximum p and calculate its ratio
i = 6; limit <- ldf[[i]] %>% ncol - 1
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
aggregate(result[, limit-2] < .80, by = as.data.frame(result[, limit-1]), FUN = mean)
table(result[, limit-1])
# extract the maximum p and the second maximum p and calculate its ratio
i = 15; limit <- ldf[[i]] %>% ncol - 1
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
aggregate(result[, limit-2] < .80, by = as.data.frame(result[, limit-1]), FUN = mean)
# extract the maximum p and the second maximum p and calculate its ratio
i = 5; limit <- ldf[[i]] %>% ncol - 1
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
aggregate(result[, limit-2] < .80, by = as.data.frame(result[, limit-1]), FUN = mean)
# extract the maximum p and the second maximum p and calculate its ratio
i = 14; limit <- ldf[[i]] %>% ncol - 1
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
aggregate(result[, limit-2] < .80, by = as.data.frame(result[, limit-1]), FUN = mean)
aggregate(result[, limit-2] < .80, by = as.data.frame(result[, limit-1]), FUN = mean)
table(result[, limit-1])
# extract the maximum p and the second maximum p and calculate its ratio
i = 5; limit <- ldf[[i]] %>% ncol - 1
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
aggregate(result[, limit-2] < .80, by = as.data.frame(result[, limit-1]), FUN = mean)
table(result[, limit-1])
####################      RELEVANT LIBRARIES AND WORKING DIRECTORY                ####################
remove(list = ls())
library(dplyr); library(tidyr); library(ggplot2); library(gridExtra)
graphics.off()
####################      DERIVE THE MAXIMUM LL FROM EACH RANDOM START                ####################
setwd(choose.dir()) # choose the directory "Optimal Likelihood" (pc)
setwd('/Users/nimrodlevin/Desktop/Study 4/Mclust outputs/Optimal Likelihood/') # mac
files <- list.files()
ldf = rep(NA,2) %>% as.data.frame()
for (i in seq(length(files)-1)) {
ldf[1:9, i] <- read.table(as.character(i), sep = ',', header = TRUE)[-1, 2] %>% round(2)
ldf[10:18, i] <- read.table(as.character(i), sep = ',', header = TRUE)[-1, 3] %>% round(2)
}
colnames(ldf) <- paste0("Seed_", seq(length(files)-1))
# And transpose the data set
ldf <- ldf %>% t %>% as.data.frame()
colnames(ldf) <- paste0("S", c(rep(1,9), rep(2, 9)), "_G", rep(2:10))
####################      PLOT THE SOLUTIONS WITH ALL DATA POINTS                ####################
plot1_2 <- ggplot(ldf, aes(x=S1_G2, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_3 <- ggplot(ldf, aes(x=S1_G3, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_4 <- ggplot(ldf, aes(x=S1_G4, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_5 <- ggplot(ldf, aes(x=S1_G5, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_6 <- ggplot(ldf, aes(x=S1_G6, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_7 <- ggplot(ldf, aes(x=S1_G7, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_8 <- ggplot(ldf, aes(x=S1_G8, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_9 <- ggplot(ldf, aes(x=S1_G9, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot1_10 <- ggplot(ldf, aes(x=S1_G10, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_2 <- ggplot(ldf, aes(x=S2_G2, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_3 <- ggplot(ldf, aes(x=S2_G3, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_4 <- ggplot(ldf, aes(x=S2_G4, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_5 <- ggplot(ldf, aes(x=S2_G5, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_6 <- ggplot(ldf, aes(x=S2_G6, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_7 <- ggplot(ldf, aes(x=S2_G7, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_8 <- ggplot(ldf, aes(x=S2_G8, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_9 <- ggplot(ldf, aes(x=S2_G9, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
plot2_10 <- ggplot(ldf, aes(x=S2_G10, y=c(0), alpha = 0.3 )) + geom_count() +
theme(axis.ticks = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.position = 'none')
grid.arrange(plot1_2, plot2_2, plot1_3, plot2_3, plot1_4, plot2_4, plot1_5, plot2_5,
plot1_6, plot2_6, plot1_7, plot2_7, plot1_8, plot2_8, plot1_9, plot2_9, plot1_10, plot2_10,
nrow = 9, ncol = 2)
x <- ldf[[2]] %>% as.data.frame()
View(x)
x <- ldf[[18]] %>% as.data.frame()
View(x)
x <- ldf[[17]] %>% as.data.frame()
View(x)
aggregate(sample2$RCA, by = as.data.frame(classifications$S2_G4), FUN = sd) %>% round(2)
####################      RELEVANT LIBRARIES AND WORKING DIRECTORY                ####################
remove(list = ls())
library(dplyr); library(ggplot2); library(lsr)
####################      LOAD THE CLUSTERING SOLUTIONS                ####################
setwd(choose.dir())
files <- list.files()
ldf <- lapply(files, read.csv); remove(files)
####################      LOAD TIDY FILES AND SUBSET FOR THE RELEVANT SAMPLE                ####################
cddq <- file.choose() %>% read.csv
# get only participants with RCA based in the USA
cddq <- cddq[!is.na(cddq$RCA) & cddq$Country == "USA", ]
# remove participants with no difference in responses
url <- file.choose(); source(url)
cddq <- cddq[!exclude(cddq[, c(49:51, 53:56, 58:60)]) == 0, ]; remove(url, exclude)
####################      CREATE TWO RANDOM SAMPLES                ####################
sample1 <- cddq[seq(1, nrow(cddq), by = 2), ]; sample1 <- sample1[, -1];
sample2 <- cddq[seq(2, nrow(cddq), by = 2), ]; sample2 <- sample2[, -1];
remove(cddq)
# get only the variables you need
sample1 <- (sample1[, c(4:5, 8:11, 48:50, 52:55, 57:59, 61)]) %>% round(2)
sample2 <- (sample2[, c(4:5, 8:11, 48:50, 52:55, 57:59, 61)]) %>% round(2)
####################      CALCULATE RI SCORE                ####################
sample1$LI <- (sample1$Lp + sample1$Lo + sample1$Lp + sample1$Ls) / 4 %>% round(2)
sample2$LI <- (sample2$Lp + sample2$Lo + sample2$Lp + sample2$Ls) / 4 %>% round(2)
####################      EXCTRACT CLASSIFICATIONS FROM THE SOLUTIONS                ####################
classifications = data.frame(rep(NA, nrow(ldf[[1]])))
uncertainty = data.frame(rep(NA, nrow(ldf[[1]])))
for (i in seq(18)){
classifications[i] = ldf[[i]]['result.classification']
#  uncertainty[i] = ldf[[i]]['result.uncertainty']
}
classifications <- cbind(classifications[,2:9], classifications[,1], classifications[,11:18], classifications[,10])
colnames(classifications) <- paste0("S", c(rep(1,9), rep(2, 9)), "_G", seq(2,10))
####################      EVALUATE THE MEAN DIFFERENCES - Ri, Rd, LI, Ie                ####################
names <- c(paste0('S1_G', 2:10), paste0('S2_G', 2:10))
# define which two solutions you want to compare (i = ?)
i = 4
aggregate(sample1[c('Ri', 'Rd', 'LI', 'Ie')], by = as.data.frame(classifications[names[i-1]]), FUN = mean)
# Extract the mean values of the variables for the clustering groups from sample 1
results = cbind(aggregate(sample1[c('Ri', 'Rd', 'LI', 'Ie', 'total')], by = as.data.frame(classifications[names[i-1]]),
FUN = mean) %>% round(2), table(classifications[names[i-1]])) %>% arrange(desc(total)) %>% t
# Extract the mean values of the variables for the clustering groups from sample 2
results = results %>% cbind(cbind(aggregate(sample2[c('Ri', 'Rd', 'LI', 'Ie', 'total')], by = as.data.frame(classifications[names[i-1+9]]),
FUN = mean) %>% round(2), table(classifications[names[i-1+9]])) %>% arrange(desc(total)) %>% t)
results[1, ] <- c(rep(1, i), rep(2, i)); results <- t(results) %>% as.data.frame;
results <- arrange(results, desc(total)) %>% t %>% as.data.frame();
results
####################      EVALUATE THE MEAN DIFFERENCES - ALL 10 DIMENSIONS               ####################
names <- c(paste0('S1_G', 2:10), paste0('S2_G', 2:10))
# define which two solutions you want to compare (i = ?)
i = 5
# Extract the mean values of the variables for the clustering groups from sample 1
results = cbind(aggregate(sample1[, 7:17], by = as.data.frame(classifications[names[i-1]]),
FUN = sd) %>% round(2), table(classifications[names[i-1]])) %>% arrange(desc(total)) %>% t
# Extract the mean values of the variables for the clustering groups from sample 2
results = results %>% cbind(cbind(aggregate(sample2[, 7:17], by = as.data.frame(classifications[names[i-1+9]]),
FUN = sd) %>% round(2), table(classifications[names[i-1+9]]))  %>% arrange(desc(total)) %>% t)
results[1, ] <- c(rep(1, i), rep(2, i)); results <- t(results) %>% as.data.frame;
results <- arrange(results, desc(total)) %>% t %>% as.data.frame();
results
aggregate(sample1$RCA, by = as.data.frame(classifications$S1_G6), FUN = sd) %>% round(2)
cor(sample1$RCA, sample1$Rd)
cor(sample2$RCA, sample2$Rd)
cor(sample2$RCA, sample2$total)
cor(sample1$RCA, sample1$total)
table(sample1$RCA)
# extract the maximum p and the second maximum p and calculate its ratio
i = 5; limit <- ldf[[i]] %>% ncol - 1
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
aggregate(result[, limit-2] < .80, by = as.data.frame(result[, limit-1]), FUN = mean)
# extract the maximum p and the second maximum p and calculate its ratio
i = 4; limit <- ldf[[i]] %>% ncol - 1
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
aggregate(result[, limit-2] < .80, by = as.data.frame(result[, limit-1]), FUN = mean)
# extract the maximum p and the second maximum p and calculate its ratio
i = 5; limit <- ldf[[i]] %>% ncol - 1
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
aggregate(result[, limit-2] < .80, by = as.data.frame(result[, limit-1]), FUN = mean)
table(result[, limit-1])
# extract the maximum p and the second maximum p and calculate its ratio
i = 14; limit <- ldf[[i]] %>% ncol - 1
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
aggregate(result[, limit-2] < .80, by = as.data.frame(result[, limit-1]), FUN = mean)
table(result[, limit-1])
# extract the maximum p and the second maximum p and calculate its ratio
i = 4; limit <- ldf[[i]] %>% ncol - 1
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
aggregate(result[, limit-2] < .80, by = as.data.frame(result[, limit-1]), FUN = mean)
table(result[, limit-1])
aggregate(result[, limit-2], by = as.data.frame(result[, limit-1]), FUN = mean)
aggregate(result[, limit-2], by = as.data.frame(result[, limit-1]), FUN = mean)
table(result[, limit-1])
# extract the maximum p and the second maximum p and calculate its ratio
i = 13; limit <- ldf[[i]] %>% ncol - 1
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
aggregate(result[, limit-2], by = as.data.frame(result[, limit-1]), FUN = mean)
table(result[, limit-1])
# extract the maximum p and the second maximum p and calculate its ratio
i = 5; limit <- ldf[[i]] %>% ncol - 1
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
aggregate(result[, limit-2], by = as.data.frame(result[, limit-1]), FUN = mean)
table(result[, limit-1])
# extract the maximum p and the second maximum p and calculate its ratio
i = 15; limit <- ldf[[i]] %>% ncol - 1
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
aggregate(result[, limit-2], by = as.data.frame(result[, limit-1]), FUN = mean)
table(result[, limit-1])
# extract the maximum p and the second maximum p and calculate its ratio
i = 14; limit <- ldf[[i]] %>% ncol - 1
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
aggregate(result[, limit-2], by = as.data.frame(result[, limit-1]), FUN = mean)
table(result[, limit-1])
# extract the maximum p and the second maximum p and calculate its ratio
i = 15; limit <- ldf[[i]] %>% ncol - 1
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
aggregate(result[, limit-2], by = as.data.frame(result[, limit-1]), FUN = mean)
table(result[, limit-1])
# extract the maximum p and the second maximum p and calculate its ratio
i = 6; limit <- ldf[[i]] %>% ncol - 1
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
aggregate(result[, limit-2], by = as.data.frame(result[, limit-1]), FUN = mean)
table(result[, limit-1])
86+87+91+91+88+88+88+87
706/8
87+87+91+91+87+87+88+84+88+88
878/10
87+88+90+89+78+78+86+87+89+83+88+88
1031/12
# extract the maximum p and the second maximum p and calculate its ratio
i = 3; limit <- ldf[[i]] %>% ncol - 1
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
aggregate(result[, limit-2], by = as.data.frame(result[, limit-1]), FUN = mean)
table(result[, limit-1])
# extract the maximum p and the second maximum p and calculate its ratio
i = 13; limit <- ldf[[i]] %>% ncol - 1
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
aggregate(result[, limit-2], by = as.data.frame(result[, limit-1]), FUN = mean)
table(result[, limit-1])
# extract the maximum p and the second maximum p and calculate its ratio
i = 12; limit <- ldf[[i]] %>% ncol - 1
result <- ldf[[i]][2:limit] %>% apply(MARGIN = 1, sort) ; result <- result %>% t
aggregate(result[, limit-2], by = as.data.frame(result[, limit-1]), FUN = mean)
table(result[, limit-1])
93+86+87+91+86+92
535/6
