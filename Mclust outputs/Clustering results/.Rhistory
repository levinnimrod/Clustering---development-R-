classifications$S2_G5 %>% table
map = setNames(c("D", "C", "E", "B", "A"), c(1, 2, 3, 4, 5))
classifications$S2_G5 <- map[unlist(classifications$S2_G5)]
classifications <- cbind(classifications[,2:9], classifications[,1], classifications[,11:18], classifications[,10])
colnames(classifications) <- paste0("S", c(rep(1,9), rep(2, 9)), "_G", seq(2,10))
####################      RELEVANT LIBRARIES AND WORKING DIRECTORY                ####################
# Update date: 13-11-2020
remove(list = ls())
library(dplyr); library(ggplot2); library(lsr);
####################      LOAD THE CLUSTERING SOLUTIONS                ####################
setwd("C:\\Users\\owner\\Desktop\\Study 4\\Mclust outputs\\Clustering results")
files <- list.files()
ldf <- lapply(files, read.csv); remove(files)
####################      LOAD TIDY FILES AND SUBSET FOR THE RELEVANT SAMPLE                ####################
cddq <- read.csv('../../../df.csv')
# get only participants with RCA based in the USA
cddq <- cddq[!is.na(cddq$RCA) & cddq$Country == "USA", ]
# remove participants with no difference in responses
source('../../R Scripts/zero-variance validity check (function).R')
cddq <- cddq[!exclude(cddq[, c(49:51, 53:56, 58:60)]) == 0, ]; remove(exclude)
####################      CREATE TWO RANDOM SAMPLES                ####################
sample1 <- cddq[seq(1, nrow(cddq), by = 2), ]; sample1 <- sample1[, -1];
sample2 <- cddq[seq(2, nrow(cddq), by = 2), ]; sample2 <- sample2[, -1];
remove(cddq)
# get only the variables you need
sample1 <- (sample1[, c(4:5, 8:11, 48:50, 52:55, 57:59, 61)]) %>% round(2)
sample2 <- (sample2[, c(4:5, 8:11, 48:50, 52:55, 57:59, 61)]) %>% round(2)
####################      EXCTRACT CLASSIFICATIONS FROM THE SOLUTIONS                ####################
classifications = data.frame(rep(NA, nrow(ldf[[1]])))
uncertainty = data.frame(rep(NA, nrow(ldf[[1]])))
for (i in seq(18)){
classifications[i] = ldf[[i]]['result.classification']
#  uncertainty[i] = ldf[[i]]['result.uncertainty']
}
classifications <- cbind(classifications[,2:9], classifications[,1], classifications[,11:18], classifications[,10])
colnames(classifications) <- paste0("S", c(rep(1,9), rep(2, 9)), "_G", seq(2,10))
####################      ADJUST THE PROFILES FOR THE CORRECT ORDER                ####################
classifications$S1_G5 %>% table
map = setNames(c("D", "A", "B", "C", "E"), c(1, 2, 3, 4, 5))
classifications$S1_G5 <- map[unlist(classifications$S1_G5)]
classifications$S2_G5 %>% table
map = setNames(c("D", "C", "E", "B", "A"), c(1, 2, 3, 4, 5))
classifications$S2_G5 <- map[unlist(classifications$S2_G5)]
####################      EVALUATE THE MEAN DIFFERENCES IN AGE               ####################
# define which two solutions you want to compare (i = ?)
i = 5
# Extract the mean values of AGE for the clustering groups from sample 1
results = cbind(aggregate(sample1$Age, by = as.data.frame(classifications[names[i-1]]),
FUN = mean) %>% round(2), table(classifications[names[i-1]])) %>% t
# Extract the mean values of AGE for the clustering groups from sample 2
results = results %>% cbind(cbind(aggregate(sample2$Age, by = as.data.frame(classifications[names[i-1+9]]),
FUN = mean) %>% round(2), table(classifications[names[i-1+9]])) %>% t)
classifications
# Extract the mean values of AGE for the clustering groups from sample 1
results = cbind(aggregate(sample1$Age, by = as.data.frame(classifications$S1_G5),
FUN = mean) %>% round(2), table(classifications[names[i-1]])) %>% t
# Extract the mean values of AGE for the clustering groups from sample 1
results = cbind(aggregate(sample1$Age, by = as.data.frame(classifications$S1_G5),
FUN = mean) %>% round(2), table(classifications$S1_G5)) %>% t
# Extract the mean values of AGE for the clustering groups from sample 1
results = cbind(aggregate(sample1$Age, by = as.factor(classifications$S1_G5),
FUN = mean) %>% round(2), table(classifications$S1_G5)) %>% t
# Extract the mean values of AGE for the clustering groups from sample 1
results = cbind(aggregate(sample1$Age, by = as.list(classifications$S1_G5),
FUN = mean) %>% round(2), table(classifications$S1_G5)) %>% t
####################      RELEVANT LIBRARIES AND WORKING DIRECTORY                ####################
# Update date: 13-11-2020
remove(list = ls())
library(dplyr); library(ggplot2); library(lsr);
####################      LOAD THE CLUSTERING SOLUTIONS                ####################
setwd("C:\\Users\\owner\\Desktop\\Study 4\\Mclust outputs\\Clustering results")
files <- list.files()
ldf <- lapply(files, read.csv); remove(files)
####################      LOAD TIDY FILES AND SUBSET FOR THE RELEVANT SAMPLE                ####################
cddq <- read.csv('../../../df.csv')
# get only participants with RCA based in the USA
cddq <- cddq[!is.na(cddq$RCA) & cddq$Country == "USA", ]
# remove participants with no difference in responses
source('../../R Scripts/zero-variance validity check (function).R')
cddq <- cddq[!exclude(cddq[, c(49:51, 53:56, 58:60)]) == 0, ]; remove(exclude)
####################      CREATE TWO RANDOM SAMPLES                ####################
sample1 <- cddq[seq(1, nrow(cddq), by = 2), ]; sample1 <- sample1[, -1];
sample2 <- cddq[seq(2, nrow(cddq), by = 2), ]; sample2 <- sample2[, -1];
remove(cddq)
# get only the variables you need
sample1 <- (sample1[, c(4:5, 8:11, 48:50, 52:55, 57:59, 61)]) %>% round(2)
sample2 <- (sample2[, c(4:5, 8:11, 48:50, 52:55, 57:59, 61)]) %>% round(2)
####################      EXCTRACT CLASSIFICATIONS FROM THE SOLUTIONS                ####################
classifications = data.frame(rep(NA, nrow(ldf[[1]])))
uncertainty = data.frame(rep(NA, nrow(ldf[[1]])))
for (i in seq(18)){
classifications[i] = ldf[[i]]['result.classification']
#  uncertainty[i] = ldf[[i]]['result.uncertainty']
}
classifications <- cbind(classifications[,2:9], classifications[,1], classifications[,11:18], classifications[,10])
colnames(classifications) <- paste0("S", c(rep(1,9), rep(2, 9)), "_G", seq(2,10))
####################      ADJUST THE PROFILES FOR THE CORRECT ORDER                ####################
classifications$S1_G5 %>% table
map = setNames(c(4, 1, 2, 3, 5), c(1, 2, 3, 4, 5))
classifications$S1_G5 <- map[unlist(classifications$S1_G5)]
classifications$S2_G5 %>% table
map = setNames(c(4, 3, 5, 2, 1), c(1, 2, 3, 4, 5))
classifications$S2_G5 <- map[unlist(classifications$S2_G5)]
####################      EVALUATE THE MEAN DIFFERENCES IN AGE               ####################
# define which two solutions you want to compare (i = ?)
i = 5
# Extract the mean values of AGE for the clustering groups from sample 1
results = cbind(aggregate(sample1$Age, by = as.data.frame(classifications[names[i-1]]),
FUN = mean) %>% round(2), table(classifications[names[i-1]])) %>% t
####################      RELEVANT LIBRARIES AND WORKING DIRECTORY                ####################
# Update date: 13-11-2020
remove(list = ls())
library(dplyr); library(ggplot2); library(lsr);
####################      LOAD THE CLUSTERING SOLUTIONS                ####################
setwd("C:\\Users\\owner\\Desktop\\Study 4\\Mclust outputs\\Clustering results")
files <- list.files()
ldf <- lapply(files, read.csv); remove(files)
####################      LOAD TIDY FILES AND SUBSET FOR THE RELEVANT SAMPLE                ####################
cddq <- read.csv('../../../df.csv')
# get only participants with RCA based in the USA
cddq <- cddq[!is.na(cddq$RCA) & cddq$Country == "USA", ]
# remove participants with no difference in responses
source('../../R Scripts/zero-variance validity check (function).R')
cddq <- cddq[!exclude(cddq[, c(49:51, 53:56, 58:60)]) == 0, ]; remove(exclude)
####################      CREATE TWO RANDOM SAMPLES                ####################
sample1 <- cddq[seq(1, nrow(cddq), by = 2), ]; sample1 <- sample1[, -1];
sample2 <- cddq[seq(2, nrow(cddq), by = 2), ]; sample2 <- sample2[, -1];
remove(cddq)
# get only the variables you need
sample1 <- (sample1[, c(4:5, 8:11, 48:50, 52:55, 57:59, 61)]) %>% round(2)
sample2 <- (sample2[, c(4:5, 8:11, 48:50, 52:55, 57:59, 61)]) %>% round(2)
####################      EXCTRACT CLASSIFICATIONS FROM THE SOLUTIONS                ####################
classifications = data.frame(rep(NA, nrow(ldf[[1]])))
uncertainty = data.frame(rep(NA, nrow(ldf[[1]])))
for (i in seq(18)){
classifications[i] = ldf[[i]]['result.classification']
#  uncertainty[i] = ldf[[i]]['result.uncertainty']
}
classifications <- cbind(classifications[,2:9], classifications[,1], classifications[,11:18], classifications[,10])
colnames(classifications) <- paste0("S", c(rep(1,9), rep(2, 9)), "_G", seq(2,10))
####################      ADJUST THE PROFILES FOR THE CORRECT ORDER                ####################
classifications$S1_G5 %>% table
map = setNames(c("D", "A", "B", "C", "E"), c(1, 2, 3, 4, 5))
classifications$S1_G5_n <- map[unlist(classifications$S1_G5)]
classifications$S2_G5 %>% table
map = setNames(c("D", "C", "E", "B", "A"), c(1, 2, 3, 4, 5))
classifications$S2_G5_n <- map[unlist(classifications$S2_G5)]
####################      EVALUATE THE MEAN DIFFERENCES IN AGE               ####################
# define which two solutions you want to compare (i = ?)
i = 5
# Extract the mean values of AGE for the clustering groups from sample 1
results = cbind(aggregate(sample1$Age, by = as.data.frame(classifications[names[i-1]]),
FUN = mean) %>% round(2), table(classifications[names[i-1]])) %>% t
####################      RELEVANT LIBRARIES AND WORKING DIRECTORY                ####################
# Update date: 13-11-2020
remove(list = ls())
library(dplyr); library(ggplot2); library(lsr);
####################      LOAD THE CLUSTERING SOLUTIONS                ####################
setwd("C:\\Users\\owner\\Desktop\\Study 4\\Mclust outputs\\Clustering results")
files <- list.files()
ldf <- lapply(files, read.csv); remove(files)
####################      LOAD TIDY FILES AND SUBSET FOR THE RELEVANT SAMPLE                ####################
cddq <- read.csv('../../../df.csv')
# get only participants with RCA based in the USA
cddq <- cddq[!is.na(cddq$RCA) & cddq$Country == "USA", ]
# remove participants with no difference in responses
source('../../R Scripts/zero-variance validity check (function).R')
cddq <- cddq[!exclude(cddq[, c(49:51, 53:56, 58:60)]) == 0, ]; remove(exclude)
####################      CREATE TWO RANDOM SAMPLES                ####################
sample1 <- cddq[seq(1, nrow(cddq), by = 2), ]; sample1 <- sample1[, -1];
sample2 <- cddq[seq(2, nrow(cddq), by = 2), ]; sample2 <- sample2[, -1];
remove(cddq)
# get only the variables you need
sample1 <- (sample1[, c(4:5, 8:11, 48:50, 52:55, 57:59, 61)]) %>% round(2)
sample2 <- (sample2[, c(4:5, 8:11, 48:50, 52:55, 57:59, 61)]) %>% round(2)
####################      EXCTRACT CLASSIFICATIONS FROM THE SOLUTIONS                ####################
classifications = data.frame(rep(NA, nrow(ldf[[1]])))
uncertainty = data.frame(rep(NA, nrow(ldf[[1]])))
for (i in seq(18)){
classifications[i] = ldf[[i]]['result.classification']
#  uncertainty[i] = ldf[[i]]['result.uncertainty']
}
classifications <- cbind(classifications[,2:9], classifications[,1], classifications[,11:18], classifications[,10])
colnames(classifications) <- paste0("S", c(rep(1,9), rep(2, 9)), "_G", seq(2,10))
####################      EVALUATE THE MEAN DIFFERENCES - ALL 10 DIMENSIONS               ####################
names <- c(paste0('S1_G', 2:10), paste0('S2_G', 2:10))
# define which two solutions you want to compare (i = ?)
i = 5
# Extract the mean values of the variables for the clustering groups from sample 1
results = cbind(aggregate(sample1[, 7:17], by = as.data.frame(classifications[names[i-1]]),
FUN = mean) %>% round(2), table(classifications[names[i-1]])) %>% arrange(desc(total)) %>% t
# Extract the mean values of the variables for the clustering groups from sample 2
results = results %>% cbind(cbind(aggregate(sample2[, 7:17], by = as.data.frame(classifications[names[i-1+9]]),
FUN = mean) %>% round(2), table(classifications[names[i-1+9]]))  %>% arrange(desc(total)) %>% t)
results[1, ] <- c(rep(1, i), rep(2, i)); results <- t(results) %>% as.data.frame;
results <- arrange(results, desc(total)) %>% t %>% as.data.frame();
x <- results; results
####################      EVALUATE THE MEAN DIFFERENCES IN AGE               ####################
# define which two solutions you want to compare (i = ?)
i = 5
# Extract the mean values of AGE for the clustering groups from sample 1
results = cbind(aggregate(sample1$Age, by = as.data.frame(classifications[names[i-1]]),
FUN = mean) %>% round(2), table(classifications[names[i-1]])) %>% t
# Extract the mean values of AGE for the clustering groups from sample 2
results = results %>% cbind(cbind(aggregate(sample2$Age, by = as.data.frame(classifications[names[i-1+9]]),
FUN = mean) %>% round(2), table(classifications[names[i-1+9]])) %>% t)
results[1, ] <- c(rep(1, i), rep(2, i)); results <- t(results) %>% as.data.frame;
results <- arrange(results, desc(total)) %>% t %>% as.data.frame();
x <- results; results
# CORRECT PROFILE NUMBERS AND ORDER
#map = setNames(c("D", "A", "B", "C", "E"), c(1, 2, 3, 4, 5))
#map = setNames(c("D", "C", "E", "B", "A"), c(1, 2, 3, 4, 5))
x$Var1
# CORRECT PROFILE NUMBERS AND ORDER
#map = setNames(c("D", "A", "B", "C", "E"), c(1, 2, 3, 4, 5))
#map = setNames(c("D", "C", "E", "B", "A"), c(1, 2, 3, 4, 5))
x$Var1 <- c("D", "A", "B", "C", "E", "D", "C", "E", "B", "A")
x
# test if there is a main effect for sample or for profile
model <- aov(x$x ~ as.factor(x$S1_G5) )
summary(model)
# test if there is a main effect for sample or for profile
model <- aov(x$x ~ as.factor(x$S1_G5) * as.factor(x$Var1))
summary(model)
# test if there is a main effect for sample or for profile
model <- aov(x$x ~ as.factor(x$Var1))
summary(model)
# test if there is a main effect for sample or for profile
model <- aov(x$x ~ as.factor(x$S1_G5) + as.factor(x$Var1))
summary(model)
pairwise.t.test(x$x, x$Var1, p.adj = "bonf")
pairwise.t.testx$Var1, x$x, p.adj = "bonf")
x
typeof(x$x)
pairwise.t.test(as.numeric(x$x), x$Var1, p.adj = "bonf")
# test if there is a main effect for sample or for profile
model <- aov(as.numeric(x$x) ~ as.factor(x$S1_G5) * as.factor(x$Var1))
summary(model)
# test if there is a main effect for sample or for profile
model <- aov(as.numeric(x$x) ~ as.factor(x$S1_G5) * as.factor(x$Var1))
summary(model)
# test if there is a main effect for sample or for profile
x$x <- as.numeric(x$x)
model <- aov(x$x ~ as.factor(x$S1_G5) * as.factor(x$Var1))
summary(model)
####################      EVALUATE THE MEAN DIFFERENCES IN AGE               ####################
# define which two solutions you want to compare (i = ?)
i = 5
# Extract the mean values of AGE for the clustering groups from sample 1
results = cbind(aggregate(sample1$Age, by = as.data.frame(classifications[names[i-1]]),
FUN = mean) %>% round(2), table(classifications[names[i-1]])) %>% t
# Extract the mean values of AGE for the clustering groups from sample 2
results = results %>% cbind(cbind(aggregate(sample2$Age, by = as.data.frame(classifications[names[i-1+9]]),
FUN = mean) %>% round(2), table(classifications[names[i-1+9]])) %>% t)
results[1, ] <- c(rep(1, i), rep(2, i)); results <- t(results) %>% as.data.frame;
results <- arrange(results, desc(total)) %>% t %>% as.data.frame();
x <- results; results
# CORRECT PROFILE NUMBERS AND ORDER
#map = setNames(c("D", "A", "B", "C", "E"), c(1, 2, 3, 4, 5))
#map = setNames(c("D", "C", "E", "B", "A"), c(1, 2, 3, 4, 5))
x$Var1 <- c("D", "A", "B", "C", "E", "D", "C", "E", "B", "A")
# test if there is a main effect for sample or for profile
x$x <- as.numeric(x$x)
i = 5
# Extract the mean values of AGE for the clustering groups from sample 1
results = cbind(aggregate(sample1$Age, by = as.data.frame(classifications[names[i-1]]),
FUN = mean) %>% round(2), table(classifications[names[i-1]])) %>% t
# Extract the mean values of AGE for the clustering groups from sample 2
results = results %>% cbind(cbind(aggregate(sample2$Age, by = as.data.frame(classifications[names[i-1+9]]),
FUN = mean) %>% round(2), table(classifications[names[i-1+9]])) %>% t)
results[1, ] <- c(rep(1, i), rep(2, i)); results <- t(results) %>% as.data.frame;
results <- arrange(results, desc(total)) %>% t %>% as.data.frame();
x <- results; results
# CORRECT PROFILE NUMBERS AND ORDER
#map = setNames(c("D", "A", "B", "C", "E"), c(1, 2, 3, 4, 5))
#map = setNames(c("D", "C", "E", "B", "A"), c(1, 2, 3, 4, 5))
x$Var1 <- c("D", "A", "B", "C", "E", "D", "C", "E", "B", "A")
# test if there is a main effect for sample or for profile
#x$x <- as.numeric(x$x)
model <- aov(x$x ~ as.factor(x$S1_G5) * as.factor(x$Var1))
summary(model)
+
# test if there is a main effect for sample or for profile
model <- aov(as.numeric(x$x) ~ as.factor(x$S1_G5) + as.factor(x$Var1))
summary(model)
# test if there is a main effect for sample or for profile
model <- aov(as.numeric(x$x ~ as.factor(x$S1_G5) + as.factor(x$Var1))
pairwise.t.test(as.numeric(x$x), x$Var1, p.adj = "bonf")
# test if there is a main effect for sample or for profile
model <- aov(as.numeric(x$x ~ as.factor(x$S1_G5) + as.factor(x$Var1))
# test if there is a main effect for sample or for profile
model <- aov(as.numeric(x$x ~ as.factor(x$S1_G5) + as.factor(x$Var1)))
# test if there is a main effect for sample or for profile
model <- aov(as.numeric(x$x ~ as.factor(x$S1_G5) + as.factor(x$Var1)))
# test if there is a main effect for sample or for profile
model <- aov(as.numeric(x$x) ~ as.factor(x$S1_G5) + as.factor(x$Var1))
summary(model)
pairwise.t.test(as.numeric(x$x), x$Var1, p.adj = "bonf")
# test if there is a main effect for sample or for profile
model <- aov(as.numeric(x$x) ~ as.factor(x$S1_G5) * as.factor(x$Var1))
summary(model)
# test if there is a main effect for sample or for profile
model <- aov(as.numeric(x$x) ~ as.factor(x$S1_G5) + as.factor(x$Var1))
summary(model)
# test if there is a main effect for sample or for profile
model <- aov(x$x ~ as.factor(x$S1_G5) * as.factor(x$Var1))
summary(model)
# test if there is a main effect for sample or for profile
model <- aov(x$x ~ as.factor(x$S1_G5) + as.factor(x$Var1))
summary(model)
pairwise.t.test(as.numeric(x$x), x$Var1, p.adj = "bonf")
pairwise.t.test(as.numeric(x$x), x$Var1, p.adj = "none")
pairwise.t.test(as.numeric(x$x), x$Var1, p.adj = "bonf")
# test if there is a main effect for sample or for profile
model <- aov(x$x ~ as.factor(x$S1_G5) + as.factor(x$Var1))
summary(model)
# test if there is a main effect for sample or for profile
model <- aov(x$x ~ as.factor(x$S1_G5) * as.factor(x$Var1))
summary(model)
# test if there is a main effect for sample or for profile
model <- aov(x$x ~ as.factor(x$S1_G5) * (x$Var1))
summary(model)
# test if there is a main effect for sample or for profile
model <- aov(x$x ~ (x$S1_G5) * (x$Var1))
summary(model)
# test if there is a main effect for sample or for profile
model <- mov(x$x ~ (x$S1_G5) * (x$Var1))
summary(model)
x
res.aov3 <- aov(x ~  + S1_G5 + Var1 + S1_G5:Var1, data = x)
summary(res.aov3)
# test if there is a main effect for sample or for profile
model <- aov(x$x ~ (x$S1_G5) + (x$Var1))
summary(model)
results
sample1 %>% head()
classifications %>% head()
####################      EXCTRACT CLASSIFICATIONS FROM THE SOLUTIONS                ####################
classifications = data.frame(rep(NA, nrow(ldf[[1]])))
uncertainty = data.frame(rep(NA, nrow(ldf[[1]])))
for (i in seq(18)){
classifications[i] = ldf[[i]]['result.classification']
#  uncertainty[i] = ldf[[i]]['result.uncertainty']
}
classifications <- cbind(classifications[,2:9], classifications[,1], classifications[,11:18], classifications[,10])
colnames(classifications) <- paste0("S", c(rep(1,9), rep(2, 9)), "_G", seq(2,10))
####################      RELEVANT LIBRARIES AND WORKING DIRECTORY                ####################
# Update date: 13-11-2020
remove(list = ls())
library(dplyr); library(ggplot2); library(lsr);
####################      LOAD THE CLUSTERING SOLUTIONS                ####################
setwd("C:\\Users\\owner\\Desktop\\Study 4\\Mclust outputs\\Clustering results")
files <- list.files()
ldf <- lapply(files, read.csv); remove(files)
####################      LOAD TIDY FILES AND SUBSET FOR THE RELEVANT SAMPLE                ####################
cddq <- read.csv('../../../df.csv')
# get only participants with RCA based in the USA
cddq <- cddq[!is.na(cddq$RCA) & cddq$Country == "USA", ]
# remove participants with no difference in responses
source('../../R Scripts/zero-variance validity check (function).R')
cddq <- cddq[!exclude(cddq[, c(49:51, 53:56, 58:60)]) == 0, ]; remove(exclude)
####################      CREATE TWO RANDOM SAMPLES                ####################
sample1 <- cddq[seq(1, nrow(cddq), by = 2), ]; sample1 <- sample1[, -1];
sample2 <- cddq[seq(2, nrow(cddq), by = 2), ]; sample2 <- sample2[, -1];
remove(cddq)
# get only the variables you need
sample1 <- (sample1[, c(4:5, 8:11, 48:50, 52:55, 57:59, 61)]) %>% round(2)
sample2 <- (sample2[, c(4:5, 8:11, 48:50, 52:55, 57:59, 61)]) %>% round(2)
####################      EXCTRACT CLASSIFICATIONS FROM THE SOLUTIONS                ####################
classifications = data.frame(rep(NA, nrow(ldf[[1]])))
uncertainty = data.frame(rep(NA, nrow(ldf[[1]])))
for (i in seq(18)){
classifications[i] = ldf[[i]]['result.classification']
#  uncertainty[i] = ldf[[i]]['result.uncertainty']
}
classifications <- cbind(classifications[,2:9], classifications[,1], classifications[,11:18], classifications[,10])
colnames(classifications) <- paste0("S", c(rep(1,9), rep(2, 9)), "_G", seq(2,10))
####################      CREATE AN AGGREGATED FILE WITH BOTH SAMPLES AND CLASSIFICATIONS               ####################
sample1 %>% head
####################      CREATE AN AGGREGATED FILE WITH BOTH SAMPLES AND CLASSIFICATIONS               ####################
data <- rbind(sample1, sample2)
####################      CREATE AN AGGREGATED FILE WITH BOTH SAMPLES AND CLASSIFICATIONS               ####################
sample1$sample <- "A"; sample2$sample <- "B"
data <- rbind(sample1, sample2)
data %>% head
classifications %>% head
####################      ADJUST THE PROFILES FOR THE CORRECT ORDER                ####################
classifications$S1_G5 %>% table
map = setNames(c("D", "A", "B", "C", "E"), c(1, 2, 3, 4, 5))
classifications$S1_G5 <- map[unlist(classifications$S1_G5)]
classifications$S2_G5 %>% table
map = setNames(c("D", "C", "E", "B", "A"), c(1, 2, 3, 4, 5))
classifications$S2_G5 <- map[unlist(classifications$S2_G5)]
####################      CREATE AN AGGREGATED FILE WITH BOTH SAMPLES AND CLASSIFICATIONS               ####################
sample1$sample <- "A"; sample2$sample <- "B"
data <- rbind(sample1, sample2)
classifications %>% head()
data$profile <- rbind(classifications$S1_G5, classifications$S2_G5)
#data$profile <-
x <- rbind(classifications$S1_G5, classifications$S2_G5)
#data$profile <-
x <- cbind(classifications$S1_G5, classifications$S2_G5)
#data$profile <-
x <- c(classifications$S1_G5, classifications$S2_G5)
data$profile <- c(classifications$S1_G5, classifications$S2_G5)
data %>% head
# test if there is a main effect for sample or for profile
model <- aov(data$Age ~ data$sample)
summary(model)
# test if there is a main effect for sample or for profile
model <- aov(data$Age ~ data$sample + data$profile)
summary(model)
# test if there is a main effect for sample or for profile
model <- aov(data$Age ~ data$sample * data$profile)
summary(model)
pairwise.t.test(data$Age, data$profile, p.adj = "bonf")
etaSquared(model)
etaSquared(model, type = 2)
etaSquared(model, type = 2, anova = TRUE)
etaSquared(model, type = 2, anova = TRUE) %>% round(2)
####################      RELEVANT LIBRARIES AND WORKING DIRECTORY                ####################
# last update - 12.11.2020
remove(list = ls())
library(dplyr); library(ggplot2); library(lsr); library(reshape2)
####################      LOAD THE CLUSTERING SOLUTIONS                ####################
setwd(choose.dir()) #clustering results
files <- list.files()
ldf <- lapply(files, read.csv); remove(files)
####################      LOAD TIDY FILES AND SUBSET FOR THE RELEVANT SAMPLE                ####################
cddq <- read.csv('../../../df.csv')
# get only participants with RCA based in the USA
cddq <- cddq[!is.na(cddq$RCA) & cddq$Country == "USA", ]
# remove participants with no difference in responses
source('../../R Scripts/zero-variance validity check (function).R')
cddq <- cddq[!exclude(cddq[, c(49:51, 53:56, 58:60)]) == 0, ]; remove(exclude)
####################      CREATE TWO RANDOM SAMPLES                ####################
sample1 <- cddq[seq(1, nrow(cddq), by = 2), ]; sample1 <- sample1[, -1];
sample2 <- cddq[seq(2, nrow(cddq), by = 2), ]; sample2 <- sample2[, -1];
remove(cddq)
# get only the variables you need
sample1 <- (sample1[, c(4:5, 8:11, 48:50, 52:55, 57:59, 61)]) %>% round(2)
sample2 <- (sample2[, c(4:5, 8:11, 48:50, 52:55, 57:59, 61)]) %>% round(2)
####################      EXCTRACT CLASSIFICATIONS FROM THE SOLUTIONS                ####################
classifications = data.frame(rep(NA, nrow(ldf[[1]])))
uncertainty = data.frame(rep(NA, nrow(ldf[[1]])))
for (i in seq(18)){
classifications[i] = ldf[[i]]['result.classification']
#  uncertainty[i] = ldf[[i]]['result.uncertainty']
}
classifications <- cbind(classifications[,2:9], classifications[,1], classifications[,11:18], classifications[,10])
colnames(classifications) <- paste0("S", c(rep(1,9), rep(2, 9)), "_G", seq(2,10))
####################      ADJUST THE PROFILES FOR THE CORRECT ORDER                ####################
classifications$S1_G5 %>% table
map = setNames(c("D", "A", "B", "C", "E"), c(1, 2, 3, 4, 5))
classifications$S1_G5 <- map[unlist(classifications$S1_G5)]
classifications$S2_G5 %>% table
map = setNames(c("D", "C", "E", "B", "A"), c(1, 2, 3, 4, 5))
classifications$S2_G5 <- map[unlist(classifications$S2_G5)]
####################      COMBINE DATA INTO ONE DF AND Z-SCORE THE 10 INDICATORS                ####################
sample1 <- cbind(sample1, classifications$S1_G5)
sample2 <- cbind(sample2, classifications$S2_G5); colnames(sample2) <- colnames(sample1)
df <- rbind(sample1, sample2); remove(sample1, sample2)
####################      STANDARDIZE SCALES                ####################
temp <- df
df[c('Rm', 'Ri', 'Rd', 'Lp', 'Ls', 'Lo', 'La', 'Iu', 'Ii', 'Ie')] <- scale(df[c('Rm', 'Ri', 'Rd', 'Lp', 'Ls', 'Lo', 'La', 'Iu', 'Ii', 'Ie')])
####################      PLOT GRAPH                ####################
dat <- aggregate(df[c('Rm', 'Ri', 'Rd', 'Lp', 'Ls', 'Lo', 'La', 'Iu', 'Ii', 'Ie')],
by = as.data.frame(df$`classifications$S1_G5`), FUN = mean)
dat <- melt(dat)
colnames(dat) <- c('moder', 'variable', 'value')
map = setNames(c("DB-Specific", "Rm-Specific", "Ri-Specific", "Information-Related", "Ie-Dominant"), c('A', 'B', 'C', 'D', 'E'))
dat$moder <- map[unlist(dat$moder)]
# create a plot for motivation only
rm <- dat[dat$variable == 'Rm',]
g <- ggplot(data = rm, aes(x=moder, y = value))
g +   geom_bar(stat="identity", position=position_dodge()) + scale_fill_grey()
# create a plot for indecisiveness beliefs only
Ri <- dat[dat$variable == 'Ri',]
g <- ggplot(data = Ri, aes(x=moder, y = value))
g +   geom_bar(stat="identity", position=position_dodge()) + scale_fill_grey()
# create a plot for dysfunctional beliefs only
Rd <- dat[dat$variable == 'Rd',]
g <- ggplot(data = Rd, aes(x=moder, y = value))
g +   geom_bar(stat="identity", position=position_dodge()) + scale_fill_grey()
g <- ggplot(data = dat, aes(x=variable, y = value, fill = moder))
g +   geom_bar(stat="identity", position=position_dodge()) + scale_fill_grey()
g <- ggplot(data = dat, aes(x=moder, y = value, fill = variable))
g +   geom_bar(stat="identity", position=position_dodge()) + scale_fill_grey()
ggplot(dat) +
geom_col_pa
g <- ggplot(data = dat, aes(x=variable, y = value, fill = moder))
g +   geom_bar(stat="identity", position=position_dodge())
g <- ggplot(data = dat, aes(x=moder, y = value, fill = variable))
g +   geom_bar(stat="identity", position=position_dodge())
data %>% head
data %>% head()
dat %>% head()
# create a plot for motivation only
rm <- dat[dat$variable == 'Rm',]
g <- ggplot(data = rm, aes(x=moder, y = value))
g +   geom_bar(stat="identity", position=position_dodge()) + scale_fill_grey()
# create a plot for indecisiveness beliefs only
Ri <- dat[dat$variable == 'Ri',]
g <- ggplot(data = Ri, aes(x=moder, y = value))
g +   geom_bar(stat="identity", position=position_dodge()) + scale_fill_grey()
# create a plot for dysfunctional beliefs only
Rd <- dat[dat$variable == 'Rd',]
g <- ggplot(data = Rd, aes(x=moder, y = value))
g +   geom_bar(stat="identity", position=position_dodge()) + scale_fill_grey()
g <- ggplot(data = dat, aes(x=variable, y = value, fill = moder))
g +   geom_bar(stat="identity", position=position_dodge())
dat
